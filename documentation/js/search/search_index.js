var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.155,1,1.928]],["body/controllers/AppController.html",[0,1.933,1,3.227,2,1.594,3,0.567,4,0.495,5,0.495,6,3.5,7,0.687,8,0.036,9,1.092,10,2.788,11,3.5,12,0.567,13,0.076,14,2.374,15,1.931,16,0.03,17,0.03]],["title/modules/AppModule.html",[18,1.155,19,1.928]],["body/modules/AppModule.html",[1,2.79,2,1.441,3,0.363,4,0.317,5,0.317,7,0.742,8,0.037,9,0.699,10,2.665,11,2.24,12,0.363,13,0.049,16,0.022,17,0.022,18,1.671,19,3.669,20,1.236,21,1.121,22,1.519,23,1.519,24,1.236,25,2.489,26,1.519,27,2.24,28,2.24,29,2.24,30,2.665,31,2.963,32,2.41,33,2.147,34,1.519,35,1.366,36,2.706,37,2.79,38,2.706,39,2.706,40,2.706,41,2.706,42,2.24,43,1.702,44,1.521,45,2.706,46,2.706,47,1.932,48,2.706,49,0.699,50,3.824,51,2.706,52,2.706,53,2.706,54,2.706,55,2.706,56,1.702,57,2.706,58,2.24,59,2.706,60,1.932,61,2.706,62,2.706,63,2.706,64,2.706,65,2.706,66,2.706,67,2.706,68,2.706,69,1.702]],["title/injectables/AppService.html",[10,1.547,70,1.155]],["body/injectables/AppService.html",[3,0.546,4,0.477,5,0.477,7,0.546,8,0.036,9,1.052,10,2.532,12,0.546,13,0.073,16,0.029,17,0.029,70,1.89,71,2.288,72,3.373,73,0.862,74,2.532,75,5.668,76,1.158,77,4.076,78,2.058,79,1.89,80,2.058,81,4.076,82,3.373]],["title/controllers/AuthController.html",[0,1.155,83,1.928]],["body/controllers/AuthController.html",[0,1.579,2,1.579,3,0.561,4,0.491,5,0.491,7,0.683,8,0.036,9,1.082,12,0.561,13,0.075,14,2.352,15,1.913,16,0.03,17,0.03,83,3.209,84,3.468,85,2.992,86,4.19,87,2.511,88,3.468,89,4.19]],["title/modules/AuthModule.html",[18,1.155,30,1.547]],["body/modules/AuthModule.html",[2,1.69,3,0.458,4,0.401,5,0.401,7,0.712,8,0.036,9,0.883,12,0.458,13,0.061,16,0.026,17,0.026,18,1.886,20,1.562,21,1.417,22,1.92,23,1.92,24,1.562,25,2.81,26,2.81,30,2.913,32,2.048,33,2.518,34,1.92,35,1.727,37,2.152,83,3.149,87,2.767,88,2.831,90,2.831,91,2.831,92,2.831,93,3.421,94,2.822,95,3.421,96,2.831]],["title/injectables/AuthService.html",[70,1.155,87,1.399]],["body/injectables/AuthService.html",[3,0.402,4,0.351,5,0.351,7,0.55,8,0.036,9,0.774,12,0.402,13,0.054,15,1.368,16,0.024,17,0.024,44,1.408,47,2.139,49,1.06,56,2.946,69,1.885,70,1.547,71,1.682,73,0.634,74,2.073,76,1.331,78,2.073,79,2.197,80,2.073,87,1.874,94,1.885,97,2.48,98,3.059,99,4.168,100,4.683,101,2.931,102,2.48,103,2.258,104,2.997,105,2.304,106,2.073,107,1.701,108,2.997,109,2.997,110,4.105,111,2.629,112,2.997,113,1.885,114,2.48,115,2.48,116,2.997,117,2.48,118,2.997,119,2.48,120,2.997,121,2.139,122,2.997,123,2.997,124,2.997]],["title/classes/CreatePostDto.html",[13,0.055,125,1.547]],["body/classes/CreatePostDto.html",[3,0.164,4,0.143,5,0.143,7,0.507,8,0.036,12,0.164,13,0.048,16,0.012,17,0.012,49,1.382,69,2.195,73,0.258,76,1.291,79,1.932,106,1.038,107,1.983,125,1.038,126,0.557,127,3.336,128,0.872,129,1.104,130,3.329,131,2.664,132,2.664,133,3.329,134,2.664,135,2.664,136,4.023,137,2.491,138,3.782,139,2.887,140,1.883,141,2.587,142,2.272,143,3.472,144,1.221,145,1.221,146,4.023,147,2.056,148,2.056,149,1.221,150,1.221,151,1.967,152,1.221,153,1.702,154,1.702,155,1.468,156,2.056,157,1.221,158,2.024,159,2.056,160,2.491,161,2.664,162,1.221,163,1.221,164,1.221,165,2.887,166,2.056,167,3.126,168,1.221,169,1.221,170,2.056,171,2.056,172,1.702,173,2.056,174,1.702,175,1.221,176,1.221,177,2.056,178,2.056,179,2.205,180,2.056,181,2.056,182,2.056,183,1.221,184,1.221,185,1.221,186,2.205,187,2.056,188,1.221,189,2.056,190,1.221,191,1.221,192,1.221,193,2.056,194,1.221,195,1.221,196,1.221,197,1.221,198,1.221,199,1.221,200,1.221,201,2.587,202,1.221,203,3.126,204,3.126,205,1.702,206,2.056,207,2.056,208,2.056,209,2.056,210,2.056,211,1.221,212,2.587,213,1.702,214,1.221,215,1.221,216,1.702,217,1.221,218,1.221,219,3.126,220,1.221,221,2.056,222,1.221,223,1.221,224,3.13,225,3.13,226,0.616,227,2.664,228,1.221,229,2.056,230,2.056,231,2.195,232,2.872,233,2.491,234,2.056,235,1.01,236,1.01,237,1.01,238,2.056,239,0.616,240,1.221,241,1.221,242,0.768,243,1.221,244,0.872,245,1.221,246,1.01,247,1.221,248,1.221,249,1.221,250,1.01,251,1.221,252,1.221,253,1.221,254,1.221,255,1.221,256,1.221,257,1.221,258,1.221,259,1.221,260,1.221,261,1.221,262,1.221,263,1.01,264,1.221,265,1.221,266,1.221,267,1.221,268,1.221,269,1.221,270,2.664,271,1.221,272,1.221,273,1.221,274,1.221,275,2.056,276,2.056,277,1.221,278,1.01,279,2.232,280,1.221,281,1.221,282,1.221,283,1.902,284,1.01,285,1.221,286,0.768,287,1.221]],["title/classes/CreatePostMetaOptionSDto.html",[13,0.055,151,1.928]],["body/classes/CreatePostMetaOptionSDto.html",[3,0.5,4,0.437,5,0.437,7,0.5,8,0.036,12,0.5,13,0.085,16,0.028,17,0.028,49,1.226,73,0.79,76,1.349,79,1.789,126,1.705,127,3.727,129,1.967,140,1.967,142,2.163,151,2.987,160,3.727,231,3.456,233,3.39,239,1.886,279,3.727,283,3.727,288,3.091,289,3.735,290,3.735,291,3.735]],["title/classes/CreateUserDto.html",[13,0.055,292,1.547]],["body/classes/CreateUserDto.html",[3,0.385,4,0.336,5,0.336,7,0.385,8,0.035,12,0.385,13,0.071,16,0.023,17,0.023,49,1.277,56,2.88,73,0.607,76,1.405,79,2.119,107,1.652,113,2.88,126,1.311,129,1.652,140,2.05,205,3.299,231,3.112,232,2.846,233,3.531,235,2.376,236,2.376,237,2.376,239,1.45,246,3.299,278,3.299,292,2.013,293,4.301,294,2.376,295,3.269,296,3.789,297,2.871,298,2.871,299,2.871,300,2.871,301,2.871,302,2.871,303,2.871,304,4.946,305,3.986,306,3.986,307,3.986,308,3.986,309,3.986,310,5.378,311,3.986,312,2.013,313,3.986,314,3.986,315,2.871,316,3.986,317,2.871,318,2.871]],["title/classes/GetUsersParamDto.html",[13,0.055,319,1.72]],["body/classes/GetUsersParamDto.html",[3,0.475,4,0.415,5,0.415,7,0.682,8,0.036,12,0.475,13,0.091,16,0.027,17,0.027,44,1.574,49,1.314,73,0.749,76,1.007,107,1.902,111,3.132,126,1.618,129,1.902,140,1.468,141,2.932,143,2.887,158,1.468,224,3.798,226,1.789,232,3.277,239,1.789,244,2.529,312,2.571,319,2.576,320,3.798,321,2.887,322,2.932,323,4.59,324,3.543,325,3.543,326,3.798,327,2.932]],["title/classes/PatchPostDto.html",[13,0.055,328,1.928]],["body/classes/PatchPostDto.html",[3,0.475,4,0.415,5,0.415,7,0.722,8,0.036,12,0.475,13,0.082,16,0.027,17,0.027,49,0.915,73,0.749,76,1.007,111,3.132,125,1.789,126,1.618,128,2.529,129,1.902,140,1.468,142,1.902,158,1.468,165,2.932,225,3.798,226,2.318,231,2.887,239,1.789,242,2.229,312,2.318,326,3.798,328,2.887,329,3.798,330,3.798,331,4.59,332,4.59,333,3.543,334,3.543,335,2.932,336,2.529,337,2.932]],["title/classes/PatchUserDto.html",[13,0.055,338,1.928]],["body/classes/PatchUserDto.html",[3,0.564,4,0.493,5,0.493,7,0.685,8,0.036,12,0.564,13,0.075,16,0.03,17,0.03,126,1.922,242,2.648,292,2.126,330,4.233,335,3.484,338,3.218,339,3.484,340,3.484,341,5.115,342,3.484,343,3.484,344,3.006]],["title/controllers/PostsController.html",[0,1.155,345,1.928]],["body/controllers/PostsController.html",[0,0.872,2,0.872,3,0.31,4,0.271,5,0.271,7,0.641,8,0.036,9,0.597,12,0.31,13,0.041,14,1.299,15,1.057,16,0.02,17,0.02,44,0.794,49,1.048,73,0.489,74,1.724,76,1.153,78,2.05,79,1.885,80,1.724,85,1.652,98,3.044,105,2.279,106,2.05,107,1.682,125,2.681,137,2.438,140,1.682,142,2.2,158,1.857,226,1.168,328,2.819,336,2.438,337,2.826,345,2.148,346,1.915,347,2.314,348,3.359,349,3.415,350,3.415,351,1.915,352,2.314,353,2.826,354,2.148,355,2.314,356,3.415,357,3.709,358,3.415,359,2.314,360,3.709,361,3.415,362,2.314,363,3.415,364,2.314,365,2.314,366,2.314,367,2.826,368,3.415,369,2.314,370,2.826,371,2.314,372,3.415,373,2.826,374,1.652,375,2.826,376,2.05,377,1.915,378,3.359,379,3.359,380,1.915,381,1.456,382,1.915,383,2.314,384,2.314,385,2.314,386,2.314,387,2.314,388,2.826,389,2.314,390,2.314,391,2.314,392,2.314,393,2.314]],["title/modules/PostsModule.html",[18,1.155,31,1.72]],["body/modules/PostsModule.html",[2,1.712,3,0.467,4,0.408,5,0.408,7,0.717,8,0.036,9,0.9,12,0.467,13,0.063,16,0.027,17,0.027,18,1.904,20,1.592,21,1.445,22,1.958,23,1.958,24,1.592,25,2.837,26,1.958,31,3.299,32,2.599,33,2.55,34,1.958,35,1.761,37,2.858,96,2.886,345,3.179,376,2.874,377,2.886,394,2.886,395,3.487,396,2.886,397,3.487,398,3.487]],["title/injectables/PostsService.html",[70,1.155,376,1.547]],["body/injectables/PostsService.html",[3,0.37,4,0.324,5,0.324,7,0.601,8,0.037,9,0.714,12,0.37,13,0.05,14,1.552,15,1.262,16,0.023,17,0.023,44,1.758,49,1.158,70,1.463,71,1.552,73,0.585,74,1.96,76,1.275,78,1.96,79,2.057,80,1.96,98,2.983,101,1.974,102,2.288,103,2.202,105,2.519,106,2.266,107,1.859,114,2.288,121,1.974,125,2.859,130,4.027,139,4.027,142,1.609,286,2.442,336,1.974,348,3.213,351,3.213,360,3.713,376,1.96,381,1.739,399,2.288,400,3.213,401,2.765,402,2.765,403,3.882,404,2.765,405,2.765,406,4.027]],["title/entities/User.html",[44,1.051,407,2.188]],["body/entities/User.html",[3,0.37,4,0.324,5,0.324,7,0.37,8,0.036,12,0.37,13,0.05,16,0.023,17,0.023,44,1.332,49,1.462,56,2.823,60,1.974,69,3.061,73,0.585,76,1.456,79,2.099,111,2.519,113,2.823,129,1.609,140,2.124,155,3.794,295,3.203,296,3.713,312,1.96,407,2.772,408,2.288,409,4.866,410,5.571,411,5.571,412,5.571,413,5.571,414,3.882,415,2.765,416,2.765,417,4.487,418,2.765,419,2.765,420,2.765,421,5.125,422,1.974]],["title/controllers/UsersController.html",[0,1.155,423,1.928]],["body/controllers/UsersController.html",[0,1.098,2,0.707,3,0.252,4,0.22,5,0.22,7,0.645,8,0.036,9,0.485,12,0.252,13,0.034,14,1.054,15,0.857,16,0.017,17,0.017,49,1.285,73,0.397,74,1.472,76,1.015,78,1.804,80,2.202,85,1.34,98,2.87,103,1.48,105,2.005,106,2.202,107,1.48,137,1.34,140,1.48,142,1.669,143,2.534,154,3.333,155,2.875,158,1.912,174,1.553,226,0.948,284,2.412,292,2.638,312,2.796,319,2.59,321,3.029,338,3.132,344,1.34,354,1.833,357,2.412,370,2.412,373,1.553,374,2.081,375,2.956,378,2.412,379,2.412,380,1.553,381,1.181,382,1.553,388,1.553,423,1.833,424,1.553,425,2.914,426,3.573,427,2.914,428,1.877,429,1.877,430,1.877,431,3.819,432,3.554,433,1.877,434,2.914,435,2.412,436,2.914,437,1.877,438,2.914,439,2.412,440,1.877,441,2.914,442,2.914,443,2.914,444,4.027,445,1.877,446,2.914,447,2.914,448,2.412,449,1.877,450,1.877,451,1.877,452,1.877,453,1.877,454,1.877,455,3.573,456,1.877,457,1.877,458,1.553,459,1.553,460,1.877,461,1.553,462,3.573,463,1.877,464,1.553,465,1.877,466,1.877,467,1.877,468,1.553,469,1.877,470,1.877,471,1.877,472,1.877,473,1.877,474,1.877,475,1.877,476,1.877,477,1.877,478,1.877]],["title/modules/UsersModule.html",[18,1.155,32,1.399]],["body/modules/UsersModule.html",[2,1.645,3,0.44,4,0.384,5,0.384,7,0.75,8,0.036,9,0.847,12,0.44,13,0.059,16,0.026,17,0.026,18,1.848,20,1.499,21,1.36,22,1.843,23,1.843,24,1.499,25,2.754,26,2.754,30,2.204,32,2.608,33,2.451,34,1.843,35,1.657,37,2.065,42,2.716,43,2.065,44,1.126,94,2.746,103,2.495,423,3.086,461,2.716,479,2.716,480,2.716,481,2.716,482,3.283,483,3.283,484,3.283,485,2.716,486,3.283]],["title/injectables/UsersService.html",[70,1.155,103,1.27]],["body/injectables/UsersService.html",[3,0.187,4,0.163,5,0.163,7,0.573,8,0.037,9,0.36,12,0.187,13,0.041,15,0.637,16,0.013,17,0.013,21,0.952,43,0.877,44,1.743,47,0.995,49,0.877,58,2.811,70,0.865,71,0.783,73,0.295,74,1.16,76,0.965,78,2.158,79,1.28,80,2.158,87,2.113,94,1.843,98,2.597,99,1.901,101,1.64,103,1.556,105,2.268,106,2.336,107,1.407,111,2.852,113,2.998,115,1.901,117,1.901,119,1.154,121,1.64,153,3.695,158,1.407,179,1.901,186,1.154,201,3.108,216,1.901,242,0.877,292,1.897,295,2.091,312,2.519,319,2.506,321,3.247,327,1.154,344,0.995,353,1.901,354,0.877,374,2.682,381,0.877,400,2.424,422,0.995,431,2.811,432,2.885,435,3.536,458,1.154,459,1.154,485,1.154,487,1.154,488,4.273,489,2.297,490,2.297,491,2.297,492,2.297,493,2.929,494,2.297,495,2.929,496,1.394,497,3.396,498,2.811,499,1.394,500,2.297,501,2.297,502,2.297,503,2.297,504,3.756,505,2.297,506,2.297,507,2.297,508,1.394,509,1.394,510,1.394,511,1.394,512,3.396,513,2.297,514,3.396,515,3.396,516,2.297,517,3.396,518,2.297,519,2.297,520,2.297,521,3.396,522,1.394,523,1.394,524,2.297,525,2.297,526,1.394,527,1.394,528,1.394,529,1.394,530,1.394,531,1.901,532,1.394,533,1.154,534,1.394,535,1.394,536,1.394,537,1.394,538,1.394,539,1.394,540,1.394,541,1.394,542,1.394,543,2.297,544,1.394,545,1.394,546,1.394,547,1.394,548,2.929,549,1.394,550,1.394]],["title/coverage.html",[551,2.976]],["body/coverage.html",[0,1.898,1,1.885,5,0.351,6,2.48,8,0.036,10,1.513,13,0.098,16,0.024,17,0.024,24,1.368,44,1.028,49,0.774,70,1.898,72,2.48,83,1.885,84,2.48,87,1.368,97,2.48,103,1.242,125,1.513,127,2.931,128,2.931,142,1.242,151,1.885,160,2.139,288,2.48,292,1.513,293,2.48,294,2.48,319,1.682,320,2.48,321,1.885,322,2.48,328,1.885,329,2.48,338,1.885,339,2.48,340,2.48,345,1.885,346,2.48,354,1.885,376,1.513,399,2.48,407,2.139,408,2.48,423,1.885,424,2.48,487,2.48,551,2.139,552,2.48,553,2.997,554,2.997,555,6.043,556,5.277,557,4.683,558,5.037,559,2.48,560,2.997,561,2.997,562,2.997,563,2.997,564,2.997,565,2.997,566,2.997,567,2.997]],["title/dependencies.html",[21,1.526,568,2.123]],["body/dependencies.html",[8,0.037,9,0.993,13,0.087,16,0.028,17,0.028,21,1.594,43,2.42,226,1.943,239,1.943,244,2.747,342,3.184,343,3.184,422,2.747,464,3.184,569,3.848,570,3.848,571,5.293,572,3.848,573,3.848,574,3.848,575,3.848,576,3.848,577,3.848,578,3.848,579,3.848,580,3.848,581,3.848,582,3.848,583,3.848,584,3.848,585,3.848,586,3.848,587,3.848,588,3.848]],["title/miscellaneous/enumerations.html",[589,1.614,590,3.047]],["body/miscellaneous/enumerations.html",[8,0.036,16,0.029,17,0.029,73,0.832,133,4.059,142,2.032,172,4.059,212,4.059,213,4.059,283,4.299,432,3.502,589,2.474,590,3.254,591,3.932,592,3.932,593,3.932,594,4.905,595,4.905,596,3.932,597,4.905,598,4.905]],["title/miscellaneous/functions.html",[589,1.614,599,3.047]],["body/miscellaneous/functions.html",[8,0.032,16,0.032,17,0.032,24,2.624,73,0.983,559,3.846,589,2.924,599,3.846,600,4.648]],["title/index.html",[73,0.543,601,2.566,602,2.566]],["body/index.html",[4,0.247,8,0.034,16,0.019,17,0.019,35,2.439,82,3.176,143,2.691,158,0.873,250,1.744,263,4.274,279,1.504,286,1.325,367,1.744,406,2.635,439,1.744,468,3.998,498,1.744,531,3.998,533,1.744,551,1.504,552,2.635,603,2.107,604,2.107,605,3.838,606,3.184,607,2.107,608,2.107,609,2.107,610,2.107,611,3.184,612,2.107,613,2.107,614,4.278,615,2.107,616,5.165,617,2.107,618,5.016,619,2.107,620,2.107,621,2.107,622,3.184,623,2.107,624,3.184,625,2.107,626,3.838,627,2.107,628,2.107,629,2.107,630,2.107,631,2.107,632,2.107,633,4.278,634,3.184,635,2.107,636,2.107,637,2.107,638,2.107,639,2.107,640,3.184,641,4.278,642,2.107,643,3.184,644,2.107,645,3.184,646,4.831,647,4.278,648,2.107,649,3.184,650,2.107,651,2.107,652,2.107,653,2.107,654,4.278,655,2.107,656,2.107,657,2.107,658,2.107,659,3.184,660,2.107,661,2.107,662,2.107,663,2.107,664,2.107,665,3.184,666,2.107,667,2.107,668,2.107,669,3.184,670,2.107,671,2.107,672,3.54,673,3.184,674,2.107,675,2.107,676,2.107,677,2.107,678,2.107,679,2.107,680,2.107,681,2.107,682,3.184,683,2.107,684,2.107,685,2.107,686,2.107,687,3.838,688,2.107,689,2.107,690,2.107,691,2.107,692,2.107,693,3.184,694,2.107,695,2.107,696,2.107,697,2.107,698,3.184,699,2.107,700,2.107,701,2.107,702,3.184,703,3.184,704,2.107,705,2.107,706,2.107,707,2.107,708,2.107,709,2.107,710,2.107,711,2.107,712,2.107,713,2.107,714,2.107,715,2.107,716,2.107,717,2.107,718,2.107,719,2.107,720,1.744]],["title/modules.html",[20,1.903]],["body/modules.html",[8,0.031,16,0.031,17,0.031,19,2.739,20,1.988,30,2.198,31,2.444,32,1.988,672,4.797,721,5.796,722,5.796,723,5.796]],["title/overview.html",[724,3.45]],["body/overview.html",[2,1.215,8,0.035,10,2.454,16,0.025,17,0.025,18,1.215,19,3.719,20,1.472,21,1.336,22,1.809,23,1.809,24,1.472,25,1.809,26,1.809,27,2.667,28,2.667,29,2.667,30,2.811,31,3.192,32,2.596,33,2.421,34,1.809,35,1.628,60,2.301,71,1.809,87,2.596,90,2.667,91,2.667,92,2.667,103,2.356,126,1.472,376,2.454,394,2.667,396,2.667,448,2.667,479,2.667,480,2.667,481,2.667,724,2.667,725,4.861,726,3.223]],["title/properties.html",[129,1.526,568,2.123]],["body/properties.html",[8,0.036,16,0.032,17,0.032,129,1.896,158,1.896,286,2.879,720,3.787,727,4.576,728,4.576,729,4.576]],["title/routes.html",[730,3.45]],["body/routes.html",[8,0.033,16,0.033,17,0.033,730,3.991]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":728,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{},"overview.html":{}}}],["1.1.26",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":327,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":324,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16.4.5",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":370,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["23t14:30:00.000z",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["23t14:30:00.000z'})@isiso8601()@isoptional",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":725,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["5432",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":726,"title":{},"body":{"overview.html":{}}}],["7.4.2",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["8.13.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["96",{"_index":412,"title":{},"body":{"entities/User.html":{}}}],["acme",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["additional",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["affiliation",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":539,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":540,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":660,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":708,"title":{},"body":{"index.html":{}}}],["api",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":378,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":462,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":379,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":380,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":384,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":466,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":468,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":611,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["assure",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["async",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":83,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":532,"title":{},"body":{"injectables/UsersService.html":{}}}],["authentication",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authservice",{"_index":87,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":543,"title":{},"body":{"injectables/UsersService.html":{}}}],["aws",{"_index":649,"title":{},"body":{"index.html":{}}}],["backers",{"_index":709,"title":{},"body":{"index.html":{}}}],["based",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":701,"title":{},"body":{"index.html":{}}}],["body",{"_index":373,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":723,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":721,"title":{},"body":{"modules.html":{}}}],["building",{"_index":606,"title":{},"body":{"index.html":{}}}],["business",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["caractères",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["channel",{"_index":675,"title":{},"body":{"index.html":{}}}],["chaque",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["character",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["chaîne",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["check",{"_index":531,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["chek",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":659,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":644,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":394,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":395,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":396,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":479,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":480,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":481,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":421,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":409,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":666,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["connection",{"_index":516,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log",{"_index":475,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('user.service",{"_index":535,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createpostdto",{"_index":391,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(patchpostsdto",{"_index":393,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["containing",{"_index":521,"title":{},"body":{"injectables/UsersService.html":{}}}],["content",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":383,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":465,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":681,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":551,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":358,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":125,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":151,"title":{"classes/CreatePostMetaOptionSDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"coverage.html":{}}}],["creates",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UsersService.html":{}}}],["createuser",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":292,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":545,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":474,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["datadase",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["de",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":677,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":456,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":472,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":470,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["defined",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["deploy",{"_index":633,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":648,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":640,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":658,"title":{},"body":{"index.html":{}}}],["description",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["developer",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["developer\",\\r\\n\"affiliation",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["development",{"_index":619,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":688,"title":{},"body":{"index.html":{}}}],["discord",{"_index":674,"title":{},"body":{"index.html":{}}}],["dive",{"_index":676,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":552,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["doe\",\\r\\n\"jobtitle",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["doit",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dotenv",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["draft",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":381,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":458,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":382,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["du",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["e2e",{"_index":628,"title":{},"body":{"index.html":{}}}],["each",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":607,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":638,"title":{},"body":{"index.html":{}}}],["eleven",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":636,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":692,"title":{},"body":{"index.html":{}}}],["entities",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":407,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":590,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/status.enum",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["est",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":547,"title":{},"body":{"injectables/UsersService.html":{}}}],["existing",{"_index":368,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":542,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":679,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":464,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":330,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":652,"title":{},"body":{"index.html":{}}}],["featured",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":662,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":654,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filtering",{"_index":518,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":400,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":510,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":403,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonbyid",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonbyid(id",{"_index":522,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["firstname",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":661,"title":{},"body":{"index.html":{}}}],["follow",{"_index":695,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":605,"title":{},"body":{"index.html":{}}}],["full",{"_index":691,"title":{},"body":{"index.html":{}}}],["function",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":599,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":657,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":467,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":363,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":75,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":385,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":362,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":601,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":319,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["graph",{"_index":684,"title":{},"body":{"index.html":{}}}],["grow",{"_index":705,"title":{},"body":{"index.html":{}}}],["handle",{"_index":546,"title":{},"body":{"injectables/UsersService.html":{}}}],["handling",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":678,"title":{},"body":{"index.html":{}}}],["handy",{"_index":667,"title":{},"body":{"index.html":{}}}],["headers",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":81,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":682,"title":{},"body":{"index.html":{}}}],["here",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["here'})@isstring()@isoptional",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["host",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["https://example.com/image.jpg",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg'})@isurl()@isoptional",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://johndoe.com",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://johndoe.com\",\\r\\n\"sameas",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://linkedin.com/in/johndoe",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":717,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n\"@type",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://twitter.com/johndoe",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ici",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["id",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["identifies",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["inc",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["inc.\"\\r\\n},\\r\\n\"url",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["incluse",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":73,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":642,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":664,"title":{},"body":{"index.html":{}}}],["inject",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":528,"title":{},"body":{"injectables/UsersService.html":{}}}],["inject(forwardref(()=>usersservice",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":70,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injecting",{"_index":529,"title":{},"body":{"injectables/UsersService.html":{}}}],["injection",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository",{"_index":527,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":530,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":656,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":617,"title":{},"body":{"index.html":{}}}],["instance",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["instanceof",{"_index":476,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":685,"title":{},"body":{"index.html":{}}}],["ip",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":316,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":326,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson()@isoptional",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":289,"title":{},"body":{"classes/CreatePostMetaOptionSDto.html":{}}}],["isstring()@isnotempty()@minlength(11)@matches(/^(?=.*[a",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":698,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":700,"title":{},"body":{"index.html":{}}}],["jobtitle",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["john",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":536,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":711,"title":{},"body":{"index.html":{}}}],["json",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":714,"title":{},"body":{"index.html":{}}}],["key",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"index.html":{}}}],["l'entit",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["lastname",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":670,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":411,"title":{},"body":{"entities/User.html":{}}}],["les",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["letter",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":720,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":703,"title":{},"body":{"index.html":{}}}],["limit",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":697,"title":{},"body":{"index.html":{}}}],["list",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["localhost",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":643,"title":{},"body":{"index.html":{}}}],["loop",{"_index":694,"title":{},"body":{"index.html":{}}}],["lément",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["makes",{"_index":650,"title":{},"body":{"index.html":{}}}],["managing",{"_index":663,"title":{},"body":{"index.html":{}}}],["matches",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":318,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["mau",{"_index":646,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":519,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"coverage.html":{}}}],["metadata",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":514,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(11",{"_index":317,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":589,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":702,"title":{},"body":{"index.html":{}}}],["mock",{"_index":517,"title":{},"body":{"injectables/UsersService.html":{}}}],["mocked",{"_index":513,"title":{},"body":{"injectables/UsersService.html":{}}}],["mode",{"_index":622,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":641,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":715,"title":{},"body":{"index.html":{}}}],["name",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":689,"title":{},"body":{"index.html":{}}}],["needs",{"_index":332,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nestframework",{"_index":719,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":342,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":548,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":604,"title":{},"body":{"index.html":{}}}],["npm",{"_index":616,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":413,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["offer",{"_index":699,"title":{},"body":{"index.html":{}}}],["official",{"_index":647,"title":{},"body":{"index.html":{}}}],["one",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":704,"title":{},"body":{"index.html":{}}}],["operations",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionnelles",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optionnels",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":288,"title":{},"body":{"classes/CreatePostMetaOptionSDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":290,"title":{},"body":{"classes/CreatePostMetaOptionSDto.html":{}}}],["options.dto.ts:9",{"_index":291,"title":{},"body":{"classes/CreatePostMetaOptionSDto.html":{}}}],["organization",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["organization\",\\r\\n\"name",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":724,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":568,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":520,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":374,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('userid",{"_index":389,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":459,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":322,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":325,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":690,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":335,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":331,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":341,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":375,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":366,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":328,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":372,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":478,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":338,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["person",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\",\\r\\n\"name",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["peuvent",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":645,"title":{},"body":{"index.html":{}}}],["please",{"_index":673,"title":{},"body":{"index.html":{}}}],["port",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":639,"title":{},"body":{"index.html":{}}}],["post",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":369,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4)@maxlength(96",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('/:userid",{"_index":387,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/:userid')@apioperation({summary",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":336,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":334,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:131",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:30",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:50",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:67",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:85",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:93",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["postgres",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":398,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":345,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":376,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus})@isnotempty()@isenum(poststatus",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype})@isenum(posttype)@isnotempty",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["prevent",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["primarygeneratedcolumn",{"_index":417,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["process.env.database_name",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.pg",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":624,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":603,"title":{},"body":{"index.html":{}}}],["project",{"_index":614,"title":{},"body":{"index.html":{}}}],["properties",{"_index":129,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":377,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":461,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["que",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["query",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":469,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":471,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":671,"title":{},"body":{"index.html":{}}}],["r\\n\"@context",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["r\\n\"@type",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["r\\n\"https://twitter.com/johndoe\",\\r\\n\"https://linkedin.com/in/johndoe\"\\r\\n]\\r\\n",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":712,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":632,"title":{},"body":{"index.html":{}}}],["real",{"_index":686,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":463,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":653,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":665,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["retrieve",{"_index":525,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieves",{"_index":512,"title":{},"body":{"injectables/UsersService.html":{}}}],["return",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":78,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":595,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["routes",{"_index":730,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":618,"title":{},"body":{"index.html":{}}}],["runs",{"_index":637,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":541,"title":{},"body":{"injectables/UsersService.html":{}}}],["sameas",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sample_token",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":608,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":594,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["searching",{"_index":524,"title":{},"body":{"injectables/UsersService.html":{}}}],["seb",{"_index":537,"title":{},"body":{"injectables/UsersService.html":{}}}],["seb@doe.com",{"_index":538,"title":{},"body":{"injectables/UsersService.html":{}}}],["serialize",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":598,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":609,"title":{},"body":{"index.html":{}}}],["service",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{}}}],["setup",{"_index":615,"title":{},"body":{"index.html":{}}}],["side",{"_index":610,"title":{},"body":{"index.html":{}}}],["sidebarenable",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":655,"title":{},"body":{"index.html":{}}}],["simulates",{"_index":515,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["software",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":323,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":707,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":600,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":592,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":591,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":484,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":526,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:20",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":559,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":329,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":596,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/status.enum.ts",{"_index":593,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":364,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:23",{"_index":359,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":371,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":397,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":399,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:23",{"_index":402,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:6",{"_index":401,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:8",{"_index":404,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":320,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":339,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:14",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:43",{"_index":511,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:73",{"_index":523,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:86",{"_index":508,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity.ts",{"_index":408,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":416,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":419,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":415,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":420,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":418,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:52",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":482,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":620,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":623,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":625,"title":{},"body":{"index.html":{}}}],["started",{"_index":602,"title":{"index.html":{}},"body":{}}],["starter",{"_index":613,"title":{},"body":{"index.html":{}}}],["statements",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":693,"title":{},"body":{"index.html":{}}}],["steps",{"_index":634,"title":{},"body":{"index.html":{}}}],["story",{"_index":597,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":651,"title":{},"body":{"index.html":{}}}],["string",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":357,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":388,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":672,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":722,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["synchronize",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["tableau",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":635,"title":{},"body":{"index.html":{}}}],["test",{"_index":406,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":630,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":629,"title":{},"body":{"index.html":{}}}],["tests",{"_index":626,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":706,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":534,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.createpost(userid",{"_index":390,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall(userid",{"_index":386,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":549,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":544,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":550,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":477,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":473,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonbyid('1234",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonbyid(userid",{"_index":405,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":687,"title":{},"body":{"index.html":{}}}],["title",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["toi",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["token",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":713,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["tre",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/User.html":{}}}],["true})@isoptional()@minlength(3",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":718,"title":{},"body":{"index.html":{}}}],["type",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":422,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":486,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":343,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":612,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isarray()@isstring({each",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["une",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":414,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":627,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":509,"title":{},"body":{"injectables/UsersService.html":{}}}],["unlicensed",{"_index":729,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":337,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":333,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":392,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":365,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":367,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["usefactory",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":44,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{}}}],["user.dto",{"_index":344,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":485,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userid",{"_index":360,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":321,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":483,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":460,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":340,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["users/user.entity",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":423,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":103,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":533,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["validatenested",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":457,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionSDto.html":{},"miscellaneous/enumerations.html":{}}}],["varchar",{"_index":410,"title":{},"body":{"entities/User.html":{}}}],["version",{"_index":727,"title":{},"body":{"properties.html":{}}}],["video",{"_index":680,"title":{},"body":{"index.html":{}}}],["visit",{"_index":669,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":683,"title":{},"body":{"index.html":{}}}],["void",{"_index":361,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":621,"title":{},"body":{"index.html":{}}}],["website",{"_index":716,"title":{},"body":{"index.html":{}}}],["without",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":668,"title":{},"body":{"index.html":{}}}],["x",{"_index":696,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":710,"title":{},"body":{"index.html":{}}}],["you're",{"_index":631,"title":{},"body":{"index.html":{}}}],["z0",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{11",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5432,\n        username: 'postgres',\n        password: process.env.PG,\n        database: process.env.DATABASE_NAME,\n        entities: [User], // Assure-toi que l'entité User est incluse ici\n        synchronize: true,\n      }),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello Nest!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    //injected\n    @Inject(forwardRef(()=>UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string, id: string) {\n    // chek user exists datadase\n    const user = this.usersService.findOnById('1234');\n    // login\n\n    // token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOption\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', example: 'Your post content here'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL for the featured image', example: 'https://example.com/image.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionSDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined, description: 'Additional meta options for the post', example: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Define the type of your post', example: 'post', enum: postType})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date on which the blog post is published', example: '2024-10-23T14:30:00.000Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n\"@context\": \"https://schema.org\",\n\"@type\": \"Person\",\n\"name\": \"John Doe\",\n\"jobTitle\": \"Software Developer\",\n\"affiliation\": {\n\"@type\": \"Organization\",\n\"name\": \"Acme Inc.\"\n},\n\"url\": \"https://johndoe.com\",\n\"sameAs\": [\n\"https://twitter.com/johndoe\",\n\"https://linkedin.com/in/johndoe\"\n]\n}'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Slug for the post URL', example: 'first-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: A slug should be all small letters and use only '-' without spaces. For example: \"my-url\" })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status of the post', example: 'draft', enum: postStatus})@IsNotEmpty()@IsEnum(postStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Tags related to the post', example: undefined})@IsArray()@IsString({each: true})@IsOptional()@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Give the title of your post', example: 'First post'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/status.enum';\nimport { CreatePostMetaOptionSDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'Give the title of your post',\n    example: 'First post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(96)\n  title: string;\n\n  @ApiProperty({\n    description: 'Define the type of your post',\n    example: 'post',\n    enum: postType,\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: 'Slug for the post URL',\n    example: 'first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message: `A slug should be all small letters and use only '-' without spaces. For example: \"my-url\" `,\n  })\n  slug: string;\n\n  @ApiProperty({\n    description: 'Status of the post',\n    example: 'draft',\n    enum: postStatus,\n  })\n  @IsNotEmpty()\n  @IsEnum(postStatus)\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: 'Your post content here',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n\"@context\": \"https://schema.org\",\\r\\n\"@type\": \"Person\",\\r\\n\"name\": \"John Doe\",\\r\\n\"jobTitle\": \"Software Developer\",\\r\\n\"affiliation\": {\\r\\n\"@type\": \"Organization\",\\r\\n\"name\": \"Acme Inc.\"\\r\\n},\\r\\n\"url\": \"https://johndoe.com\",\\r\\n\"sameAs\": [\\r\\n\"https://twitter.com/johndoe\",\\r\\n\"https://linkedin.com/in/johndoe\"\\r\\n]\\r\\n}',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'URL for the featured image',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'The date on which the blog post is published',\n    example: '2024-10-23T14:30:00.000Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: string;\n\n  @ApiPropertyOptional({\n    description: 'Tags related to the post',\n    example: ['nestjs', 'swagger'],\n  })\n  @IsArray()\n  @IsString({ each: true }) // Chaque élément du tableau doit être une chaîne de caractères\n  @IsOptional() // Les tags peuvent être optionnels\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifies for your meta option',\n          example: 'sidebarEnable',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: true,\n        },\n      },\n    },\n    description: 'Additional meta options for the post',\n    example: [{ key: 'author', value: 'John Doe' }],\n  })\n  @IsOptional() // Les meta options peuvent être optionnelles\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionSDto)\n  metaOption?: CreatePostMetaOptionSDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionSDto.html":{"url":"classes/CreatePostMetaOptionSDto.html","title":"class - CreatePostMetaOptionSDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionSDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionSDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(11)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{11,}$/, {message: 'Minimum eleven characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(11)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{11,}$/, {\n    message:\n      'Minimum eleven characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDto } from \"./create-user.dto\";\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(userId: string, createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:userId')@ApiOperation({summary: 'Creates a new post for a user'})@ApiResponse({status: 201, description: 'The post has been successfully created.'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Updates an existing post'})@ApiResponse({status: 200, description: 'The post has been successfully updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @Post('/:userId')\n  @ApiOperation({ summary: 'Creates a new post for a user' })\n  @ApiResponse({\n    status: 201,\n    description: 'The post has been successfully created.',\n  })\n  public createPost(\n    @Param('userId') userId: string,\n    @Body() createPostDto: CreatePostDto,\n  ) {\n    // return this.postsService.createPost(userId, createPostDto);\n    console.log(createPostDto);\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Updates an existing post' })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully updated',\n  })\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(userId: string, createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { author: string; post: CreatePostDto; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n  public findAll(userId: string) {\n    const user = this.usersService.findOnById(userId);\n    return [\n      {\n        user: user,\n        title: 'Test Title',\n        content: 'Test Content',\n      },\n      {\n        user: user,\n        title: 'Test Title',\n        content: 'Test Content',\n      },\n    ];\n  }\n  public createPost(userId: string, createPostDto: CreatePostDto) {\n    return {\n      author: userId,\n      post: createPostDto,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  Req,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-users.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// import { Request } from 'express';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(\n      'users controller POST / createUserDTO is not a CreateUserDTO type >>>',\n      createUserDto instanceof CreateUserDto,\n    );\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling business operations related to users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOnById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            Creates an instance of the UsersService.\nIt uses dependency injection for the authentication service with forwardRef\nto prevent circular dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected authentication service.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDTO: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users (mocked).\nThis method simulates a connection to a database and returns a mock list of users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for filtering users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Array\n\n                        \n                            \n                                A list of users containing their first name and email.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOnById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOnById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by their ID.\nThis method simulates searching for a user in a database by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Array\n\n                        \n                            \n                                An array containing a user object with id, first name, and email.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n/**\n * Service responsible for handling business operations related to users.\n * @class UsersService\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Creates an instance of the `UsersService`.\n   * It uses dependency injection for the authentication service with `forwardRef`\n   * to prevent circular dependencies.\n   *\n   * @param {AuthService} authService - The injected authentication service.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  /**\n   * Retrieves a list of users (mocked).\n   * This method simulates a connection to a database and returns a mock list of users.\n   *\n   * @param {GetUsersParamDto} getUsersParamDto - Parameters for filtering users.\n   * @param {number} limit - Maximum number of users to return.\n   * @param {number} page - Page number for pagination.\n   * @returns {Array} A list of users containing their first name and email.\n   */\n\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ): Array {\n    // Check if the user is authenticated using the authentication service.\n    const isAuth = this.authService.isAuth();\n    console.log('user.service >>>', isAuth);\n\n    // Return a mock list of users.\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Seb',\n        email: 'seb@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Retrieves a user by their ID.\n   * This method simulates searching for a user in a database by their ID.\n   *\n   * @param {string} id - The ID of the user to retrieve.\n   * @returns {Array} An array containing a user object with id, first name, and email.\n   */\n\n  public findOnById(\n    id: string,\n  ): Array {\n    // Return a mock user with id, first name, and email.\n    return [\n      {\n        id: 1234,\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  public async createUser(createUserDTO: CreateUserDto) {\n    // Check is user exists with same email\n    const existingUser = await this.usersRepository.findOne({\n      where: {\n        email: createUserDTO.email,\n      },\n    });\n    // Handle exception\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDTO);\n    newUser = await this.usersRepository.save(newUser);\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionSDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-users.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            dotenv : ^16.4.5\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
