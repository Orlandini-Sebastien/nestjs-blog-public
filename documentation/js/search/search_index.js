var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.119,1,2.251]],["body/controllers/AppController.html",[0,1.913,1,4.275,2,1.596,3,0.447,4,0.398,5,0.398,6,4.073,7,0.72,8,3.849,9,4.884,10,4.884,11,5.784,12,2.728,13,0.536,14,0.027,15,1.055,16,3.429,17,4.073,18,0.447,19,0.056,20,2.915,21,1.831,22,0.022,23,0.022]],["title/modules/AppModule.html",[24,1.119,25,2.251]],["body/modules/AppModule.html",[1,3.48,2,1.52,3,0.313,4,0.278,5,0.278,13,0.616,14,0.027,15,0.738,16,3.358,17,2.846,18,0.313,19,0.039,22,0.018,23,0.018,24,1.73,25,4.486,26,1.476,27,1.28,28,1.718,29,1.718,30,1.476,31,2.667,32,1.718,33,2.846,34,2.846,35,2.846,36,3.358,37,3.666,38,3.666,39,3.358,40,3.093,41,2.343,42,1.718,43,1.59,44,2.501,45,2.895,46,3.37,47,3.37,48,3.37,49,3.37,50,2.037,51,1.373,52,3.37,53,1.476,54,1.59,55,3.37,56,3.881,57,4.744,58,2.243,59,4.596,60,3.37,61,4.596,62,3.37,63,4.596,64,3.37,65,2.501,66,3.48,67,2.846,68,3.37,69,3.37,70,1.373,71,3.37,72,3.37,73,3.37,74,3.37,75,3.37,76,1.865,77,3.37,78,0.591,79,3.37,80,3.37,81,3.37,82,3.37,83,3.37,84,3.37,85,3.37,86,3.37,87,3.37,88,3.37,89,3.37,90,3.37,91,3.37,92,3.37,93,3.37,94,3.37,95,2.243,96,3.37,97,3.37,98,3.37,99,1.718,100,3.37]],["title/injectables/AppService.html",[16,1.872,101,1.119]],["body/injectables/AppService.html",[3,0.414,4,0.369,5,0.369,7,0.666,12,2.951,13,0.414,14,0.027,15,0.976,16,3.462,18,0.414,19,0.052,22,0.021,23,0.021,101,1.825,102,2.275,103,3.768,104,5.517,105,5.517,106,4.659,107,4.093,108,6.256,109,4.357,110,0.612,111,2.247,112,6.256,113,0.844,114,4.462,115,2.548,116,2.273,117,5.517,118,1.818,119,4.462,120,3.768]],["title/controllers/AuthController.html",[0,1.119,121,2.251]],["body/controllers/AuthController.html",[0,1.587,2,1.587,3,0.445,4,0.396,5,0.396,7,0.716,8,3.836,10,4.869,12,2.72,13,0.535,14,0.027,15,1.05,18,0.445,19,0.056,20,2.899,21,1.821,22,0.022,23,0.022,121,4.267,122,4.051,123,2.899,124,4.797,125,4.278,126,3.191,127,3.151,128,4.051,129,4.797]],["title/modules/AuthModule.html",[24,1.119,36,1.872]],["body/modules/AuthModule.html",[2,1.814,3,0.41,4,0.365,5,0.365,13,0.578,14,0.027,15,0.967,18,0.41,19,0.051,22,0.021,23,0.021,24,1.972,26,1.935,27,1.677,28,2.253,29,2.253,30,1.935,31,3.04,32,3.04,36,3.665,40,2.795,41,2.795,42,2.253,43,2.084,45,2.445,121,3.967,127,3.498,128,3.731,130,3.731,131,3.731,132,3.731,133,4.418,134,3.648,135,4.418,136,3.731]],["title/injectables/AuthService.html",[101,1.119,127,1.724]],["body/injectables/AuthService.html",[3,0.29,4,0.258,5,0.258,7,0.652,8,2.905,13,0.405,14,0.027,15,0.685,18,0.29,19,0.036,21,1.188,22,0.017,23,0.017,27,1.188,65,2.321,70,1.275,76,1.732,78,0.765,95,4.131,99,2.564,101,1.444,102,1.595,107,3.24,110,0.429,111,1.779,113,0.951,115,2.217,116,2.31,118,2.049,125,4.038,127,2.775,134,2.082,137,2.642,138,5.03,139,2.228,140,6.086,141,5.93,142,2.596,143,4.596,144,2.226,145,2.642,146,2.928,147,3.129,148,1.779,149,1.349,150,1.178,151,3.129,152,4.596,153,5.03,154,3.687,155,4.366,156,4.366,157,2.054,158,1.356,159,3.129,160,4.366,161,4.366,162,3.946,163,4.247,164,3.687,165,4.366,166,5.443,167,5.443,168,2.226,169,5.03,170,5.03,171,4.366,172,2.642,173,3.129,174,2.321,175,3.129,176,3.129,177,3.129,178,2.642,179,2.642,180,1.732,181,2.372,182,2.321,183,3.129,184,3.129,185,2.321,186,3.129]],["title/classes/CreatePostDto.html",[19,0.039,187,1.872]],["body/classes/CreatePostDto.html",[3,0.148,4,0.132,5,0.132,7,0.848,13,0.422,14,0.027,18,0.148,19,0.049,22,0.01,23,0.01,53,2.104,70,1.726,78,1.098,109,1.74,110,0.219,113,1.034,116,2.364,126,2.125,149,0.808,150,1.716,158,1.227,185,1.185,187,1.447,188,0.753,189,4.715,190,1.185,191,1.458,192,1.234,193,2.115,194,1.333,195,0.865,196,1.578,197,2.616,198,2.616,199,1.854,200,1.234,201,1.027,202,3.322,203,4.384,204,2.21,205,2.805,206,3.852,207,2.805,208,2.21,209,3.454,210,2.904,211,2.775,212,4.057,213,1.58,214,1.597,215,2.616,216,3.228,217,1.597,218,1.597,219,4.805,220,1.447,221,1.838,222,2.849,223,1.597,224,1.597,225,2.321,226,3.84,227,3.782,228,2.555,229,2.555,230,1.597,231,1.597,232,2.75,233,2.125,234,1.941,235,1.597,236,1.447,237,2.616,238,1.185,239,3.377,240,2.345,241,1.597,242,1.597,243,1.597,244,2.616,245,2.616,246,2.616,247,2.561,248,2.616,249,4.235,250,1.597,251,1.597,252,2.345,253,3.721,254,3.337,255,2.209,256,1.941,257,2.616,258,1.941,259,1.597,260,1.597,261,2.616,262,2.616,263,2.616,264,2.616,265,2.775,266,2.616,267,2.209,268,2.616,269,1.597,270,1.597,271,1.597,272,2.465,273,2.209,274,1.597,275,2.616,276,1.597,277,1.597,278,1.597,279,2.616,280,1.597,281,1.597,282,1.597,283,1.597,284,1.597,285,1.597,286,1.597,287,1.74,288,2.125,289,1.348,290,3.243,291,3.243,292,2.209,293,2.209,294,2.209,295,2.209,296,2.209,297,1.597,298,2.616,299,2.209,300,2.616,301,2.616,302,3.377,303,1.941,304,1.597,305,1.597,306,2.345,307,2.616,308,1.597,309,1.597,310,1.145,311,2.616,312,1.597,313,1.597,314,1.941,315,1.941,316,2.209,317,1.74,318,2.209,319,3.028,320,2.904,321,0.606,322,2.616,323,1.597,324,2.21,325,2.616,326,1.941,327,2.519,328,3.197,329,2.849,330,2.209,331,1.185,332,1.185,333,1.185,334,2.616,335,0.753,336,1.348,337,1.348,338,1.185,339,1.185,340,1.185,341,1.597,342,1.597,343,1.597,344,1.348,345,1.348,346,1.597,347,1.597,348,1.597,349,1.597,350,1.597,351,1.597,352,1.597,353,1.597,354,1.597,355,1.597,356,1.597,357,1.348,358,1.348,359,1.597,360,1.941,361,1.348,362,1.597,363,1.941,364,1.597,365,1.185]],["title/classes/CreatePostMetaOptionsDto.html",[19,0.039,233,1.872]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.376,4,0.335,5,0.335,7,0.606,9,4.388,13,0.376,14,0.027,18,0.482,19,0.067,22,0.02,23,0.02,53,2.799,78,0.911,110,0.556,113,0.767,116,2.176,188,1.914,191,1.973,194,3.082,196,1.22,199,2.117,201,1.606,213,1.172,225,2.452,232,3.464,233,3.345,240,2.876,252,3.173,253,3.011,265,3.458,326,3.856,327,2.876,335,1.914,338,3.856,363,4.253,366,2.275,367,3.427,368,3.14,369,3.14,370,5.197,371,2.275,372,4.058,373,4.058,374,3.458,375,5.197,376,3.815,377,1.653,378,4.058,379,4.058]],["title/classes/CreateTagDto.html",[19,0.039,380,2.044]],["body/classes/CreateTagDto.html",[3,0.215,4,0.192,5,0.192,7,0.945,13,0.326,14,0.027,18,0.326,19,0.049,22,0.013,23,0.013,78,1.076,109,2.338,110,0.318,113,0.96,116,2.404,126,1.945,149,1.808,150,1.744,168,1.791,188,1.095,191,1.334,192,1.657,193,1.926,194,1.791,195,1.162,196,0.545,199,1.431,201,1.461,204,2.821,208,3.893,209,4.033,213,1.466,216,3.132,222,3.146,225,2.123,227,4.177,228,3.555,229,3.555,232,2.123,239,2.607,247,2.123,265,2.957,287,3.146,288,1.945,289,1.96,290,3.992,291,3.992,292,2.967,293,3.992,294,2.967,295,2.967,296,3.992,310,2.955,314,2.607,317,3.146,319,3.146,320,2.562,321,0.881,326,2.607,327,2.346,328,3.146,329,3.508,330,2.967,331,1.722,332,1.722,333,1.722,335,1.095,344,2.967,345,1.96,357,1.96,358,1.96,368,2.123,369,2.123,376,2.338,377,2.069,380,3.454,381,4.512,382,1.96,383,2.607,384,1.945,385,1.791,386,2.607,387,3.514,388,2.322,389,2.322,390,2.967,391,3.514,392,3.514,393,2.123,394,2.322,395,2.322,396,2.607,397,2.967,398,2.607,399,2.322,400,2.322,401,2.607,402,2.607,403,3.514,404,3.514,405,2.322,406,2.322,407,3.514,408,2.322,409,3.514,410,2.967,411,3.514,412,2.322,413,1.96,414,1.403]],["title/classes/CreateUserDto.html",[19,0.039,415,1.872]],["body/classes/CreateUserDto.html",[3,0.229,4,0.204,5,0.204,7,0.779,13,0.342,14,0.027,18,0.342,19,0.051,22,0.014,23,0.014,78,1.021,95,3.961,107,2.733,109,2.451,110,0.339,113,0.923,116,2.364,139,2.18,149,1.924,150,1.476,158,1.476,162,4.188,168,1.878,188,1.166,191,1.399,192,1.738,193,1.501,194,1.878,195,1.219,199,2.373,201,1.138,213,1.409,216,2.969,220,3.612,225,3.763,232,2.948,247,2.948,272,1.834,273,2.088,288,3.028,314,3.62,317,4.032,318,3.111,319,1.645,320,3.153,321,0.939,327,2.7,328,2.451,329,3.62,331,1.834,332,1.834,333,1.834,335,1.166,368,2.226,376,3.247,377,1.988,383,2.733,384,2.039,385,1.878,386,2.733,401,3.62,410,3.111,413,3.111,415,3.136,416,4.406,417,2.088,418,4.059,419,3.267,420,3.718,421,4.12,422,2.472,423,2.472,424,2.472,425,2.472,426,4.12,427,2.472,428,2.472,429,4.879,430,4.879,431,5.471,432,5.471,433,5.471,434,2.472,435,4.879,436,3.684,437,3.684,438,3.684,439,3.684,440,2.472,441,3.684,442,3.684,443,2.472,444,2.472,445,2.472,446,2.472]],["title/classes/GetUsersParamDto.html",[19,0.039,447,2.044]],["body/classes/GetUsersParamDto.html",[3,0.352,4,0.313,5,0.313,7,0.742,13,0.515,14,0.027,18,0.461,19,0.069,22,0.019,23,0.019,78,1.032,110,0.52,113,0.717,139,2.191,148,2.026,150,1.693,157,2.208,158,1.589,168,2.535,188,1.788,191,2.236,192,2.346,193,2.026,201,1.537,213,1.095,216,2.535,222,2.813,319,3.309,321,1.439,324,3.309,328,3.309,335,1.788,340,2.813,368,3.005,377,1.544,390,4.199,447,3.56,448,4.199,449,3.26,450,3.202,451,4.199,452,3.69,453,4.657,454,4.199,455,4.973,456,3.792,457,3.792,458,4.973,459,4.973,460,4.199,461,3.792]],["title/entities/MetaOption.html",[371,1.481,462,1.378]],["body/entities/MetaOption.html",[3,0.267,4,0.238,5,0.238,7,0.43,13,0.382,14,0.027,18,0.382,19,0.048,22,0.016,23,0.016,53,2.749,54,2.724,78,1.1,99,2.101,110,0.395,113,1.05,116,1.826,157,1.591,158,1.297,196,1.492,199,1.678,201,1.273,213,1.603,220,2.904,232,2.49,236,2.28,240,2.28,252,2.28,254,4.271,265,3.364,363,3.568,366,2.528,369,2.49,371,2.603,374,4.177,376,3.842,377,2.138,384,2.28,462,2.352,463,1.595,464,2.434,465,4.12,466,3.479,467,3.893,468,3.492,469,4.061,470,4.061,471,4.061,472,2.882,473,5.247,474,4.284,475,2.43,476,3.2,477,2.882,478,2.49,479,2.28,480,3.057,481,1.918,482,2.742,483,2.882,484,3.492,485,2.434,486,3.479,487,3.479,488,2.882,489,2.882,490,3.479,491,4.12,492,4.12,493,3.479,494,4.061,495,2.882,496,2.138,497,3.479,498,3.479,499,1.918]],["title/controllers/MetaOptionsController.html",[0,1.119,500,2.251]],["body/controllers/MetaOptionsController.html",[0,1.96,2,1.141,3,0.32,4,0.285,5,0.285,7,0.697,8,3.106,13,0.526,14,0.027,15,0.755,18,0.433,19,0.054,20,2.084,21,1.309,22,0.018,23,0.018,53,2.948,54,2.202,78,0.604,110,0.473,111,1.902,113,0.652,115,1.902,118,1.405,123,2.084,142,2.317,144,1.758,148,1.405,149,1.066,150,0.93,168,2.38,181,2.202,191,2.153,194,2.38,195,2.102,196,1.435,200,2.675,213,0.996,233,3.516,240,3.516,321,1.309,339,2.558,366,2.044,374,4.228,377,1.405,500,3.943,501,2.912,502,3.521,503,4.668,504,2.912,505,3.448,506,2.583,507,4.668,508,4.668,509,3.106,510,2.583,511,2.084,512,1.627,513,3.279,514,2.912,515,2.912,516,2.295,517,3.448,518,3.448,519,2.558,520,2.084,521,2.912,522,2.912,523,3.448]],["title/modules/MetaOptionsModule.html",[24,1.119,37,2.044]],["body/modules/MetaOptionsModule.html",[2,1.825,3,0.414,4,0.369,5,0.369,13,0.596,14,0.027,15,0.976,18,0.414,19,0.052,22,0.021,23,0.021,24,1.981,26,1.954,27,1.694,28,2.275,29,2.275,30,1.954,31,3.053,32,2.275,37,3.957,41,2.813,42,2.275,43,2.105,45,2.47,50,2.697,51,1.818,53,2.415,54,2.105,366,1.954,371,1.954,500,3.985,513,3.624,514,3.768,515,3.768,524,3.768,525,3.768,526,4.462,527,4.462,528,2.697,529,4.462]],["title/injectables/MetaOptionsService.html",[101,1.119,513,1.872]],["body/injectables/MetaOptionsService.html",[3,0.306,4,0.272,5,0.272,7,0.772,12,2.135,13,0.541,14,0.027,15,0.721,18,0.42,19,0.053,21,1.251,22,0.017,23,0.017,51,1.343,53,2.753,78,0.793,99,1.68,101,1.497,102,1.68,110,0.452,111,1.844,113,0.856,115,2.106,118,1.343,142,2.264,144,2.837,148,1.844,149,1.399,150,1.221,180,1.824,181,2.135,191,1.963,194,2.837,195,1.994,196,0.774,200,2.439,233,3.53,240,2.505,339,2.445,366,2.264,371,2.753,374,3.703,377,1.343,462,1.844,475,1.443,502,3.703,504,2.783,506,2.861,509,3.012,510,2.505,512,1.555,513,3.335,519,3.358,520,3.363,521,4.366,528,1.992,530,4.366,531,2.783,532,3.822,533,4.527,534,3.124,535,3.296,536,3.73,537,3.296,538,5.17,539,3.296,540,4.7,541,2.193,542,2.783,543,3.296,544,3.296,545,3.296,546,3.296,547,2.193,548,3.296]],["title/classes/PatchPostDto.html",[19,0.039,549,2.044]],["body/classes/PatchPostDto.html",[3,0.387,4,0.344,5,0.344,7,0.79,13,0.566,14,0.027,18,0.387,19,0.071,22,0.02,23,0.02,78,0.731,110,0.572,113,0.789,157,2.085,158,1.426,187,3.214,188,1.968,190,3.095,191,2.008,192,2.495,193,2.154,196,1.512,200,1.968,201,1.634,213,1.204,247,2.521,320,3.196,321,2.008,324,3.519,327,2.927,335,1.968,384,2.927,549,3.196,550,4.466,551,4.466,552,3.519,553,5.156,554,5.289,555,4.466,556,3.196,557,5.289,558,4.466,559,3.522,560,4.171,561,3.522,562,3.095,563,2.521]],["title/classes/PatchUserDto.html",[19,0.039,564,2.251]],["body/classes/PatchUserDto.html",[3,0.342,4,0.305,5,0.305,7,0.729,13,0.54,14,0.027,18,0.453,19,0.071,22,0.019,23,0.019,78,0.856,110,0.506,113,0.698,139,2.213,157,2.006,158,1.477,188,1.741,191,1.854,192,2.304,193,1.99,199,1.99,200,1.741,201,1.801,213,1.065,247,2.23,320,2.952,321,1.401,324,3.25,327,2.703,335,1.741,368,2.952,377,1.503,384,2.703,385,2.49,415,3.03,468,3.25,478,2.952,479,2.703,551,4.125,552,3.25,553,5.119,555,4.125,556,3.522,558,4.125,559,3.116,561,3.116,563,3.309,564,3.878,565,4.125,566,3.116,567,4.125,568,4.885,569,3.624,570,3.25,571,5.476,572,3.69,573,4.885,574,4.885,575,3.116,576,3.116,577,2.738]],["title/entities/Post.html",[196,0.794,462,1.378]],["body/entities/Post.html",[3,0.2,4,0.178,5,0.178,7,0.322,13,0.481,14,0.027,18,0.2,19,0.025,22,0.013,23,0.013,53,1.453,54,1.016,70,2.585,78,1.143,110,0.295,113,1.142,116,2.22,139,1.716,150,1.629,157,1.339,158,0.895,196,1.565,201,1.026,203,4.147,204,2.693,206,4.141,207,3.418,208,3.268,209,3.268,210,2.968,211,2.718,212,4.147,213,1.744,220,2.517,221,2.718,227,3.026,228,2.208,229,2.208,236,3.089,238,2.462,240,1.836,249,4.713,254,3.026,255,2.802,256,3.374,265,1.836,302,3.644,303,2.462,306,1.836,310,2.272,316,2.802,336,1.819,337,1.819,366,0.943,369,2.005,371,2.507,396,3.849,398,2.462,402,2.462,462,1.352,463,1.192,475,0.943,476,2.693,478,2.748,479,1.836,481,3.714,482,4.19,484,3.81,485,1.819,497,1.819,498,2.802,499,2.208,528,1.302,578,1.819,579,2.462,580,2.154,581,3.318,582,5.188,583,2.154,584,3.84,585,2.154,586,3.849,587,3.849,588,2.154,589,2.154,590,3.318,591,2.154,592,3.84,593,2.154,594,4.548,595,3.318,596,2.802,597,2.802,598,2.154,599,2.462,600,2.154,601,2.154,602,2.154,603,3.318,604,1.819,605,3.318,606,2.154,607,2.154,608,2.154,609,3.318,610,2.802,611,3.318,612,2.154,613,2.154,614,2.154,615,2.154]],["title/controllers/PostsController.html",[0,1.119,616,2.251]],["body/controllers/PostsController.html",[0,0.771,2,0.771,3,0.216,4,0.192,5,0.192,7,0.918,13,0.472,14,0.027,15,0.51,18,0.216,19,0.027,20,1.408,21,0.885,22,0.014,23,0.014,70,1.436,78,0.891,110,0.32,111,1.436,113,0.896,115,2.264,116,1.613,118,2.331,123,1.408,126,1.95,139,2.034,142,2.692,148,1.731,149,1.464,150,1.278,157,2.057,158,1.372,168,1.797,181,2.4,187,3.167,191,1.613,192,2.005,193,1.731,195,1.567,196,1.585,199,1.436,210,2.863,213,1.368,216,1.797,258,1.729,299,2.976,306,1.95,321,0.885,393,2.568,414,3.666,453,2.615,460,1.968,506,2.622,509,2.345,510,2.961,511,2.13,512,1.099,516,1.551,520,2.863,549,3.234,552,3.561,556,2.863,562,2.615,563,3.358,569,2.615,570,2.345,616,3.152,617,1.968,618,3.524,619,4.25,620,3.524,621,4.737,622,3.524,623,2.331,624,2.331,625,1.968,626,2.615,627,4.245,628,2.331,629,4.737,630,2.828,631,4.737,632,2.331,633,1.968,634,2.976,635,3.524,636,3.97,637,2.331,638,2.976,639,2.976,640,2.863,641,2.331,642,2.331,643,2.331,644,3.524,645,2.331,646,2.976,647,2.331,648,2.615,649,3.524,650,3.524,651,2.331,652,1.968,653,2.331,654,2.615,655,1.729,656,2.352,657,1.968,658,3.775,659,2.976,660,3.775,661,1.729,662,2.331,663,2.331,664,2.331,665,3.515,666,2.331,667,2.331,668,2.331,669,2.331,670,2.331,671,2.331,672,2.331,673,1.408,674,2.331,675,2.331]],["title/modules/PostsModule.html",[24,1.119,38,2.044]],["body/modules/PostsModule.html",[2,1.737,3,0.382,4,0.341,5,0.341,13,0.612,14,0.027,15,0.902,18,0.382,19,0.048,22,0.02,23,0.02,24,1.911,26,1.805,27,1.565,28,2.102,29,2.102,30,1.805,31,2.945,32,2.102,38,4.06,39,3.552,40,3.273,41,2.677,42,2.102,43,1.945,45,2.905,50,2.492,51,1.68,54,1.945,136,3.482,196,0.968,366,1.805,371,2.299,528,2.492,616,3.843,656,3.552,657,3.482,676,3.482,677,4.123,678,3.482,679,4.123,680,4.123,681,3.482,682,4.123,683,4.123]],["title/injectables/PostsService.html",[101,1.119,656,1.872]],["body/injectables/PostsService.html",[3,0.215,4,0.191,5,0.191,7,0.346,13,0.542,14,0.027,15,0.507,18,0.215,19,0.027,21,1.331,22,0.013,23,0.013,51,0.943,54,1.092,70,1.923,76,1.281,78,0.827,101,1.16,102,1.181,106,1.955,110,0.317,111,1.429,113,0.959,115,2.066,118,2.174,126,1.941,139,1.562,142,2.688,144,1.788,145,1.955,146,2.518,148,1.923,149,1.459,150,1.273,157,1.562,158,1.142,172,1.955,180,2.613,187,3.068,194,1.788,195,1.4,196,1.442,200,2.227,201,0.716,205,4.507,211,3.352,221,2.807,234,1.718,288,1.941,306,1.941,315,1.718,360,1.718,361,1.955,366,1.014,371,1.535,385,1.788,401,1.718,414,3.602,449,1.281,453,2.602,463,1.281,468,3.376,475,1.014,486,1.955,499,1.541,502,1.541,511,1.399,512,1.092,520,2.119,522,1.955,528,1.399,534,3.71,536,3.451,541,1.541,542,1.955,547,3.89,549,3.066,562,2.602,570,2.334,640,2.853,648,2.602,656,1.941,661,1.718,673,1.399,681,1.955,684,1.955,685,2.961,686,3.987,687,2.827,688,4.233,689,4.722,690,2.316,691,2.316,692,2.316,693,3.142,694,3.507,695,2.316,696,2.316,697,3.507,698,2.316,699,2.316,700,2.961,701,2.316,702,2.316,703,3.987,704,2.316,705,2.316,706,2.316,707,2.316,708,2.316,709,2.316,710,2.316,711,2.316,712,2.316,713,2.316,714,3.507,715,2.316,716,2.316,717,2.316,718,2.316,719,2.316,720,2.316,721,2.316,722,3.507,723,2.316,724,3.507,725,2.316,726,3.507,727,2.316,728,3.507,729,2.316,730,3.507,731,2.316,732,3.507,733,2.316,734,2.316,735,1.955,736,2.316,737,1.955]],["title/entities/Tag.html",[310,1.481,462,1.378]],["body/entities/Tag.html",[3,0.19,4,0.169,5,0.169,7,0.82,13,0.296,14,0.027,18,0.296,19,0.037,22,0.012,23,0.012,70,2.349,78,1.145,99,1.627,110,0.281,113,1.09,116,2.347,149,1.64,150,1.609,154,2.695,157,1.297,158,1.057,195,1.056,196,1.194,199,1.3,201,0.986,204,2.609,208,3.532,209,3.532,211,1.766,213,1.665,227,2.946,228,2.123,229,2.123,234,3.284,236,2.45,239,2.368,252,2.45,254,3.753,265,1.766,287,2.946,310,2.991,365,2.368,369,3.317,377,2.297,383,2.368,384,1.766,386,2.368,393,1.928,396,3.284,398,2.368,402,3.284,414,2.369,418,2.368,462,1.803,463,1.133,466,2.695,468,2.123,469,3.311,470,3.311,471,3.311,474,3.284,475,0.897,476,2.609,478,3.606,479,2.45,480,3.284,481,3.193,482,3.837,484,3.382,487,2.695,494,3.311,496,1.52,499,2.123,510,1.766,563,1.928,579,2.368,584,3.738,586,3.771,587,3.771,597,4.292,604,1.729,610,2.695,630,2.123,640,1.928,673,1.928,735,2.695,738,1.729,739,4.427,740,3.191,741,3.921,742,2.048,743,3.191,744,3.921,745,2.048,746,2.368,747,3.191,748,3.191,749,2.048,750,3.191,751,2.048,752,3.191,753,3.191,754,2.048,755,3.191,756,3.191,757,3.191,758,2.048,759,3.191,760,3.191,761,2.048,762,2.048,763,2.048,764,3.191,765,3.191,766,2.048,767,3.191,768,3.191,769,3.191]],["title/controllers/TagsController.html",[0,1.119,770,2.251]],["body/controllers/TagsController.html",[0,0.888,2,0.888,3,0.249,4,0.222,5,0.222,7,0.954,13,0.471,14,0.027,15,0.587,18,0.249,19,0.031,21,1.019,22,0.015,23,0.015,70,2.068,76,1.485,78,0.89,110,0.368,111,1.594,113,0.873,115,2.068,118,1.881,123,1.622,142,2.662,144,1.368,148,1.881,149,1.427,150,1.246,157,2.184,158,1.52,168,1.995,180,1.485,181,2.179,191,2.139,192,1.846,193,1.594,195,1.295,196,0.919,210,3.068,211,1.485,213,1.334,220,2.166,310,2.946,321,1.019,380,3.674,393,3.068,467,1.991,506,2.809,509,2.604,510,2.556,511,1.622,512,1.266,516,1.786,534,3.405,626,2.903,627,2.903,630,2.604,633,3.9,634,4.287,636,3.766,640,3.603,654,3.427,655,1.991,658,3.766,660,4.004,665,3.427,673,3.068,687,2.588,693,2.604,746,3.766,770,2.604,771,2.266,772,3.913,773,3.913,774,3.913,775,2.683,776,4.619,777,2.683,778,3.913,779,3.913,780,3.304,781,3.913,782,2.683,783,3.913,784,2.683,785,2.683,786,2.683,787,2.683,788,2.683,789,2.683,790,2.683,791,2.683,792,2.266,793,3.913,794,2.266,795,2.683,796,2.683,797,2.683,798,2.683,799,2.683,800,2.683,801,2.683,802,2.683,803,2.683,804,2.683]],["title/modules/TagsModule.html",[24,1.119,39,1.872]],["body/modules/TagsModule.html",[2,1.808,3,0.408,4,0.363,5,0.363,13,0.594,14,0.027,15,0.962,18,0.408,19,0.051,22,0.021,23,0.021,24,1.968,26,1.925,27,1.669,28,2.242,29,2.242,30,1.925,31,3.033,32,3.033,39,3.661,41,2.787,42,2.242,43,2.074,45,2.433,50,2.657,51,1.791,310,1.925,687,3.495,770,3.958,792,3.713,805,3.713,806,3.713,807,3.713,808,4.397,809,4.397,810,3.713,811,4.397]],["title/injectables/TagsService.html",[101,1.119,687,1.724]],["body/injectables/TagsService.html",[3,0.283,4,0.252,5,0.252,13,0.526,14,0.027,15,0.667,18,0.283,19,0.035,21,1.158,22,0.021,23,0.016,51,1.242,70,1.747,76,1.687,78,0.994,101,1.419,102,1.554,110,0.418,111,1.747,113,1.072,115,2.461,118,2.192,142,2.839,144,2.186,148,2.31,149,1.753,150,1.529,157,1.999,158,1.691,180,1.687,181,2.34,195,1.419,200,2.539,211,2.978,310,2.839,380,3.427,475,1.335,512,1.438,534,3.918,536,3.252,541,2.029,547,3.581,640,2.591,673,2.591,687,2.186,693,3.581,703,3.621,746,3.182,794,2.575,810,2.575,812,2.575,813,4.288,814,4.288,815,4.288,816,3.049,817,3.049,818,4.96,819,4.288,820,3.049,821,4.288,822,3.049,823,4.288,824,3.049,825,3.621,826,4.288,827,3.049,828,4.288,829,3.049,830,3.049,831,3.049,832,3.049,833,3.049,834,3.049,835,3.049]],["title/entities/User.html",[139,1.119,462,1.378]],["body/entities/User.html",[3,0.231,4,0.206,5,0.206,7,0.372,12,1.748,13,0.344,14,0.027,18,0.344,19,0.043,22,0.014,23,0.014,70,1.996,78,1.124,95,3.484,99,2.498,110,0.342,113,1.038,116,2.415,139,2.104,149,1.514,150,1,157,1.732,158,1.193,162,3.484,164,3.13,196,1.426,199,2.235,201,1.146,213,1.585,220,2.711,221,2.051,225,3.528,236,3.037,253,2.75,288,2.051,317,3.885,377,2.133,385,1.89,414,2.674,418,2.75,419,3.283,420,3.736,421,3.13,426,5.453,449,2.051,462,2.235,463,1.38,467,2.75,474,2.75,475,1.091,476,2.944,478,3.528,479,2.051,480,2.75,481,3.26,482,3.885,484,3.484,490,4.137,493,3.13,496,1.85,579,2.75,586,4.332,587,4.505,825,3.13,836,2.105,837,4.899,838,3.707,839,3.707,840,2.493,841,5.839,842,5.488,843,2.493,844,2.493,845,3.707,846,2.493,847,3.707,848,3.707,849,2.493,850,3.707,851,3.707,852,3.707,853,3.13,854,3.13,855,3.707,856,2.493,857,3.707,858,2.493,859,3.707,860,3.707]],["title/controllers/UsersController.html",[0,1.119,861,2.251]],["body/controllers/UsersController.html",[0,1.247,2,0.843,3,0.236,4,0.211,5,0.211,7,0.936,12,1.203,13,0.513,14,0.027,15,0.558,18,0.236,19,0.03,20,1.541,21,0.968,22,0.014,23,0.014,78,1.128,110,0.35,111,1.535,113,0.848,115,2.153,118,2.254,123,1.541,139,2.019,142,2.628,146,2.115,148,1.826,149,1.634,150,1.209,158,1.723,181,1.778,193,1.535,195,1.639,196,1.053,199,2.018,210,2.993,213,1.295,216,2.525,236,2.741,258,1.892,306,1.411,321,0.968,360,2.796,415,3.562,447,3.344,449,3.168,452,2.796,506,2.086,510,2.481,511,1.541,512,1.203,516,1.697,552,2.508,556,2.278,563,2.709,564,3.911,569,2.796,577,1.892,625,3.183,626,2.796,627,4.105,636,3.675,638,3.183,639,3.183,646,3.183,652,2.153,654,3.327,655,3.922,658,3.675,659,3.786,660,3.922,661,1.892,665,3.327,861,2.508,862,2.153,863,3.769,864,4.484,865,3.769,866,2.55,867,2.55,868,2.55,869,2.55,870,4.672,871,4.36,872,2.55,873,3.769,874,3.183,875,3.769,876,2.55,877,3.769,878,2.55,879,3.769,880,3.769,881,2.55,882,3.769,883,3.183,884,2.55,885,2.55,886,2.55,887,3.769,888,2.55,889,2.55,890,2.153,891,2.153,892,2.55,893,2.153,894,2.55,895,2.55,896,2.55,897,4.484,898,2.55,899,2.55,900,2.55,901,2.55,902,2.55,903,2.55,904,2.55,905,2.55,906,2.55,907,2.55,908,2.55,909,2.55,910,2.55,911,2.55,912,2.55,913,2.55]],["title/modules/UsersModule.html",[24,1.119,40,1.724]],["body/modules/UsersModule.html",[2,1.763,3,0.391,4,0.349,5,0.349,13,0.615,14,0.027,15,0.924,18,0.391,19,0.049,22,0.02,23,0.02,24,1.932,26,1.848,27,1.602,28,2.152,29,2.152,30,1.848,31,2.977,32,2.977,36,2.949,40,3.343,41,2.716,42,2.152,43,1.991,45,2.336,50,2.55,51,1.719,56,3.564,58,2.808,134,3.545,139,1.396,146,3.217,861,3.885,893,3.564,914,3.564,915,3.564,916,3.564,917,4.221,918,4.221,919,4.221,920,3.564,921,3.564,922,3.564,923,4.221]],["title/injectables/UsersService.html",[101,1.119,146,1.595]],["body/injectables/UsersService.html",[3,0.185,4,0.165,5,0.165,7,0.785,13,0.519,14,0.027,15,0.437,18,0.185,19,0.036,21,1.465,22,0.012,23,0.012,27,1.188,51,0.814,57,1.687,58,1.329,65,1.482,66,1.329,76,1.106,78,0.765,99,2.418,101,1.035,102,1.019,110,0.274,111,1.275,113,0.826,115,2.142,118,2.049,125,3.519,126,1.732,127,2.853,134,2.568,139,2.113,142,2.45,143,2.643,144,1.596,146,2.237,148,2.049,149,1.682,150,1.178,152,1.687,157,1.931,158,1.674,162,3.724,163,2.643,174,1.482,178,2.643,179,1.687,180,2.136,181,2.237,182,2.863,193,1.275,195,1.74,200,1.476,238,2.322,267,4.248,272,1.482,288,2.417,306,2.784,385,1.019,393,1.207,415,2.625,419,2.322,447,3.29,449,3.368,451,1.687,454,2.643,475,0.875,506,1.732,512,0.942,519,2.322,520,3.178,532,2.643,534,3.04,536,2.639,540,2.643,541,1.329,547,2.568,570,2.083,577,1.482,599,1.482,630,2.906,648,3.24,685,2.643,686,3.259,693,2.083,700,1.687,737,1.687,780,1.687,853,1.687,870,3.688,871,3.732,874,4.44,890,1.687,891,1.687,920,1.687,921,1.687,922,1.687,924,1.687,925,3.13,926,3.13,927,3.13,928,1.998,929,4.367,930,3.859,931,4.367,932,1.998,933,3.13,934,3.13,935,3.13,936,3.13,937,3.13,938,1.998,939,1.998,940,1.998,941,3.13,942,3.13,943,3.13,944,3.859,945,3.859,946,3.13,947,3.13,948,3.13,949,1.998,950,3.13,951,3.13,952,4.367,953,1.998,954,1.998,955,1.998,956,1.998,957,1.998,958,1.687,959,1.998,960,1.998,961,1.998,962,1.998,963,4.367,964,1.998,965,3.859,966,4.742,967,1.998,968,3.13,969,3.13,970,1.998,971,3.13,972,1.998,973,1.998,974,1.998,975,3.13,976,1.998,977,1.998,978,3.13,979,1.998,980,1.998,981,2.643,982,1.998,983,1.998,984,1.998,985,1.998,986,3.859,987,1.998,988,1.998]],["title/coverage.html",[989,3.418]],["body/coverage.html",[0,2.038,1,2.363,5,0.293,6,2.998,14,0.027,16,1.965,19,0.073,22,0.018,23,0.018,30,1.555,44,2.635,53,1.555,54,2.246,66,2.363,78,0.622,101,2.038,103,2.998,121,2.363,122,2.998,127,1.81,137,2.998,139,1.175,146,1.675,187,1.965,189,2.998,190,3.533,195,1.175,196,1.118,233,1.965,310,1.555,338,2.635,366,2.513,367,2.998,371,1.555,380,2.146,381,2.998,382,2.998,415,1.965,416,2.998,417,2.998,447,2.146,448,2.998,449,1.965,450,2.998,462,2.338,464,2.998,479,1.965,500,2.363,501,2.998,513,1.965,530,2.998,531,2.998,549,2.146,550,2.998,564,2.363,565,2.998,566,2.998,578,2.998,616,2.363,617,2.998,656,1.965,684,2.998,687,1.81,738,2.998,770,2.363,771,2.998,812,2.998,836,2.998,861,2.363,862,2.998,924,2.998,989,2.635,990,2.635,991,3.551,992,6.785,993,6.294,994,3.551,995,4.761,996,3.551,997,5.985,998,4.761,999,4.761,1000,2.998,1001,2.998,1002,3.551,1003,3.551,1004,3.551,1005,3.551,1006,4.761,1007,4.761,1008,3.551,1009,3.551,1010,3.551,1011,3.551,1012,3.551,1013,3.551,1014,3.551,1015,3.551,1016,3.551]],["title/dependencies.html",[27,1.543,1017,2.389]],["body/dependencies.html",[14,0.027,15,1.033,19,0.066,22,0.022,23,0.022,27,1.792,51,1.923,58,3.142,287,3.142,321,1.792,335,2.227,340,3.503,475,2.067,575,3.987,576,3.987,1018,4.721,1019,4.721,1020,6.139,1021,4.721,1022,4.721,1023,4.721,1024,4.721,1025,4.721,1026,4.721,1027,4.721,1028,4.721,1029,4.721,1030,4.721,1031,4.721,1032,4.721,1033,4.721,1034,4.721,1035,4.721,1036,4.721,1037,4.721,1038,4.721]],["title/miscellaneous/enumerations.html",[1039,1.565,1040,3.433]],["body/miscellaneous/enumerations.html",[14,0.026,22,0.022,23,0.022,110,0.661,196,1.358,206,4.292,252,3.763,256,4.292,302,4.292,303,4.292,871,4.292,1039,2.669,1040,4.073,1041,4.823,1042,4.823,1043,4.823,1044,5.784,1045,5.784,1046,4.823,1047,5.784,1048,5.784]],["title/miscellaneous/functions.html",[1039,1.565,1049,3.433]],["body/miscellaneous/functions.html",[12,2.418,14,0.023,22,0.023,23,0.023,30,2.869,110,0.703,883,4.329,990,3.804,1000,4.329,1001,4.329,1039,2.837,1049,4.329,1050,5.127,1051,5.127,1052,4.329,1053,5.127,1054,5.127,1055,5.127,1056,5.127,1057,5.127,1058,5.127]],["title/index.html",[110,0.388,1059,2.829,1060,2.829]],["body/index.html",[4,0.26,7,0.47,12,2.803,14,0.026,22,0.017,23,0.017,43,2.803,120,4.263,174,2.338,182,4.41,185,2.338,216,2.783,221,1.744,365,2.338,385,1.606,397,4.61,452,2.338,502,2.097,536,1.904,556,1.904,567,2.661,596,2.661,599,3.746,854,2.661,958,3.705,981,3.705,989,2.338,990,3.256,1052,5.251,1061,3.151,1062,3.151,1063,5.048,1064,4.388,1065,3.151,1066,3.151,1067,3.151,1068,3.151,1069,4.388,1070,3.151,1071,3.151,1072,5.459,1073,3.151,1074,6.219,1075,3.151,1076,6.098,1077,3.151,1078,3.151,1079,3.151,1080,4.388,1081,3.151,1082,4.388,1083,3.151,1084,5.048,1085,3.151,1086,3.151,1087,3.151,1088,3.151,1089,3.151,1090,3.151,1091,5.459,1092,4.388,1093,3.151,1094,3.151,1095,3.151,1096,3.151,1097,4.388,1098,4.388,1099,3.151,1100,4.388,1101,5.943,1102,5.459,1103,3.151,1104,4.388,1105,3.151,1106,3.151,1107,3.151,1108,3.151,1109,5.459,1110,3.151,1111,3.151,1112,3.151,1113,3.151,1114,4.388,1115,3.151,1116,3.151,1117,3.151,1118,4.388,1119,3.151,1120,3.151,1121,3.151,1122,4.388,1123,3.151,1124,3.151,1125,4.61,1126,3.151,1127,3.151,1128,3.151,1129,3.151,1130,3.151,1131,3.151,1132,3.151,1133,4.388,1134,3.151,1135,3.151,1136,3.151,1137,3.151,1138,3.151,1139,3.151,1140,3.151,1141,3.151,1142,3.151,1143,4.388,1144,3.151,1145,3.151,1146,3.151,1147,3.151,1148,4.388,1149,3.151,1150,3.151,1151,3.151,1152,4.388,1153,4.388,1154,3.151,1155,3.151,1156,3.151,1157,3.151,1158,3.151,1159,3.151,1160,3.151,1161,3.151,1162,3.151,1163,3.151,1164,3.151,1165,3.151,1166,3.151,1167,3.151,1168,3.151,1169,3.151,1170,2.661]],["title/modules.html",[26,2.017]],["body/modules.html",[14,0.023,22,0.023,23,0.023,25,3.317,26,2.182,36,2.758,37,3.012,38,3.012,39,2.758,40,2.541,1125,5.675,1171,6.72,1172,6.72,1173,6.72]],["title/overview.html",[1174,3.89]],["body/overview.html",[2,1.287,14,0.026,16,3.11,22,0.019,23,0.019,24,1.287,25,4.529,26,1.703,27,1.477,28,1.983,29,1.983,30,1.703,31,1.983,32,1.983,33,3.285,34,3.285,35,3.285,36,3.498,37,3.727,38,3.986,39,3.562,40,3.281,41,2.578,42,1.983,43,1.835,102,1.983,127,3.281,130,3.285,131,3.285,132,3.285,146,3.036,188,1.835,315,2.886,463,2.153,513,3.11,524,3.285,525,3.285,656,3.11,676,3.285,678,3.285,687,3.281,805,3.285,806,3.285,807,3.285,914,3.285,915,3.285,916,3.285,1174,3.285,1175,5.619,1176,3.89]],["title/properties.html",[201,1.256,1017,2.389]],["body/properties.html",[7,0.788,14,0.026,22,0.023,23,0.023,201,1.631,221,2.921,1170,4.457,1177,5.278,1178,5.278,1179,5.278]],["title/miscellaneous/variables.html",[1039,1.565,1180,3.433]],["body/miscellaneous/variables.html",[14,0.025,22,0.023,23,0.023,44,3.916,66,4.059,67,4.457,110,0.724,252,2.921,592,4.457,1039,2.921,1180,4.457,1181,5.278]],["title/routes.html",[1182,3.89]],["body/routes.html",[14,0.024,22,0.024,23,0.024,1182,4.592]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1178,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.26",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["1024",{"_index":398,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":881,"title":{},"body":{"controllers/UsersController.html":{}}}],["10})@delete",{"_index":641,"title":{},"body":{"controllers/PostsController.html":{}}}],["11",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["12/12",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":461,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":456,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["17.13.3",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["1})@isnotempty()@isint",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["2.0.5",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":636,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":626,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["23t14:30:00.000z",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["23t14:30:00.000z'})@isiso8601()@isoptional",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":402,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["3",{"_index":401,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{}}}],["3.3.0",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"overview.html":{}}}],["4/5",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":778,"title":{},"body":{"controllers/TagsController.html":{}}}],["404",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{}}}],["5",{"_index":736,"title":{},"body":{"injectables/PostsService.html":{}}}],["5/5",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["6",{"_index":1175,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1176,"title":{},"body":{"overview.html":{}}}],["7.4.2",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["8.13.0",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["8601",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["9",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["96",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["account",{"_index":429,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["acme",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["active",{"_index":748,"title":{},"body":{"entities/Tag.html":{}}}],["add",{"_index":713,"title":{},"body":{"injectables/PostsService.html":{}}}],["added",{"_index":743,"title":{},"body":{"entities/Tag.html":{}}}],["additional",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["address",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["affiliation",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["allow",{"_index":554,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["allowing",{"_index":567,"title":{},"body":{"classes/PatchUserDto.html":{},"index.html":{}}}],["allows",{"_index":390,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["already",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":1158,"title":{},"body":{"index.html":{}}}],["api",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["apibody",{"_index":793,"title":{},"body":{"controllers/TagsController.html":{}}}],["apioperation",{"_index":658,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":633,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["apiproperty",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["apiproperty({description",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["apiproperty({type",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":659,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":660,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":516,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags('meta",{"_index":517,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["apitags('posts",{"_index":663,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":795,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/MetaOptionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":876,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":1069,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":25,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":16,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["article",{"_index":595,"title":{},"body":{"entities/Post.html":{}}}],["assign",{"_index":734,"title":{},"body":{"injectables/PostsService.html":{}}}],["associated",{"_index":396,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["assuming",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["assurez",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["async",{"_index":534,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["attempting",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":121,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authentication",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authmodule",{"_index":36,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":127,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":755,"title":{},"body":{"entities/Tag.html":{}}}],["autoloadentities",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["automatically",{"_index":474,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["await",{"_index":547,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1104,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1159,"title":{},"body":{"index.html":{}}}],["bad",{"_index":779,"title":{},"body":{"controllers/TagsController.html":{}}}],["badrequestexception",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["badrequestexception('the",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":452,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["before",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["between",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["bi",{"_index":491,"title":{},"body":{"entities/MetaOption.html":{}}}],["blog",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["board",{"_index":1151,"title":{},"body":{"index.html":{}}}],["body",{"_index":511,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brief",{"_index":391,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["browse",{"_index":1173,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1171,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1064,"title":{},"body":{"index.html":{}}}],["business",{"_index":925,"title":{},"body":{"injectables/UsersService.html":{}}}],["cascade",{"_index":499,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":488,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["cette",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{}}}],["channel",{"_index":1127,"title":{},"body":{"index.html":{}}}],["character",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["check",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["checks",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["circular",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":19,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":1114,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":1099,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":524,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":525,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":676,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":677,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":678,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":805,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":806,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":807,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":914,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":916,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":915,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":484,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":481,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1119,"title":{},"body":{"index.html":{}}}],["complex",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["compodoc/compodoc",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["config/app.config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":922,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["configservice.get('database.autoloadentities",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.name",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.user",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":931,"title":{},"body":{"injectables/UsersService.html":{}}}],["configurations",{"_index":1056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["confirm",{"_index":718,"title":{},"body":{"injectables/PostsService.html":{}}}],["connecting",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":944,"title":{},"body":{"injectables/UsersService.html":{}}}],["considered",{"_index":747,"title":{},"body":{"entities/Tag.html":{}}}],["console.log",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('user.service",{"_index":957,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(this.profileconfiguration",{"_index":959,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":928,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(metaoptionrepository",{"_index":535,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["constructor(tagsrepository",{"_index":816,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(usersservice",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["containing",{"_index":630,"title":{},"body":{"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/UsersService.html":{}}}],["content",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["context",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":518,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":662,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":796,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convertir",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["core",{"_index":105,"title":{},"body":{"injectables/AppService.html":{}}}],["courses",{"_index":1132,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":989,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":522,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{}}}],["create(createpostdto",{"_index":691,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":504,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["create(createtagdto",{"_index":819,"title":{},"body":{"injectables/TagsService.html":{}}}],["created",{"_index":510,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["created'})@apiresponse({status",{"_index":777,"title":{},"body":{"controllers/TagsController.html":{}}}],["createdate",{"_index":469,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":471,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createpost",{"_index":619,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(userid",{"_index":623,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":187,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":709,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostmetaoptionsdto",{"_index":233,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["creates",{"_index":506,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createtag",{"_index":772,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(@body",{"_index":798,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(createtagdto",{"_index":775,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtagdto",{"_index":380,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":926,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":937,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":415,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto})@apiresponse({status",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers",{"_index":863,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":866,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["creation",{"_index":467,"title":{},"body":{"entities/MetaOption.html":{},"controllers/TagsController.html":{},"entities/User.html":{}}}],["creation'})@post",{"_index":784,"title":{},"body":{"controllers/TagsController.html":{}}}],["current",{"_index":603,"title":{},"body":{"entities/Post.html":{}}}],["data",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["database",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["databaseconfig",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["datedeleteat",{"_index":741,"title":{},"body":{"entities/Tag.html":{}}}],["de",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1129,"title":{},"body":{"index.html":{}}}],["default",{"_index":592,"title":{},"body":{"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{}}}],["define",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["defined",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["defines",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["delete",{"_index":640,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete('soft",{"_index":802,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":694,"title":{},"body":{"injectables/PostsService.html":{}}}],["deleted",{"_index":673,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deleted'})@apiquery({name",{"_index":637,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletedatecolumn",{"_index":744,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":620,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(@query('id",{"_index":674,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":632,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletes",{"_index":634,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["deletetag",{"_index":773,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(@query('id",{"_index":800,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":786,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetags",{"_index":813,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletetags(id",{"_index":821,"title":{},"body":{"injectables/TagsService.html":{}}}],["dependencies",{"_index":27,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":934,"title":{},"body":{"injectables/UsersService.html":{}}}],["deploy",{"_index":1091,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":1103,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":1097,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":1113,"title":{},"body":{"index.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":393,"title":{},"body":{"classes/CreateTagDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/UsersService.html":{}}}],["developer",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["developer\",\\r\\n\"affiliation",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["development",{"_index":1077,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1138,"title":{},"body":{"index.html":{}}}],["directonal",{"_index":492,"title":{},"body":{"entities/MetaOption.html":{}}}],["discord",{"_index":1126,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1128,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":990,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doe",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["doe\",\\r\\n\"jobtitle",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["doe'})@isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["draft",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":368,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{}}}],["dtos/create",{"_index":512,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":661,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["e.g",{"_index":594,"title":{},"body":{"entities/Post.html":{}}}],["e2e",{"_index":1086,"title":{},"body":{"index.html":{}}}],["each",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":582,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1065,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":1095,"title":{},"body":{"index.html":{}}}],["element",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eleven",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["empty",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/User.html":{}}}],["en",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["endpoint",{"_index":508,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["endpoints",{"_index":503,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["ensure",{"_index":854,"title":{},"body":{"entities/User.html":{},"index.html":{}}}],["ensures",{"_index":378,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["enterprise",{"_index":1142,"title":{},"body":{"index.html":{}}}],["entities",{"_index":463,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":462,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":638,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["enum",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":1040,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["erreur",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["error",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UsersService.html":{}}}],["essential",{"_index":839,"title":{},"body":{"entities/User.html":{}}}],["eventually",{"_index":631,"title":{},"body":{"controllers/PostsController.html":{}}}],["example",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exceed",{"_index":842,"title":{},"body":{"entities/User.html":{}}}],["exception",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["exist",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["existe",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{}}}],["existing",{"_index":552,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["existinguser",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1131,"title":{},"body":{"index.html":{}}}],["explanation",{"_index":392,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["export",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":553,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":1107,"title":{},"body":{"index.html":{}}}],["featured",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["featuredimageurl",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["features",{"_index":1116,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":459,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["fetched",{"_index":877,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":873,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetching",{"_index":455,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["few",{"_index":1109,"title":{},"body":{"index.html":{}}}],["field",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["fields",{"_index":384,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Tag.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filtered",{"_index":650,"title":{},"body":{"controllers/PostsController.html":{}}}],["filtering",{"_index":454,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["find",{"_index":703,"title":{},"body":{"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["findall",{"_index":686,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":939,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmultipletags",{"_index":814,"title":{},"body":{"injectables/TagsService.html":{}}}],["findmultipletags(tags",{"_index":823,"title":{},"body":{"injectables/TagsService.html":{}}}],["findonbyid",{"_index":927,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonbyid(id",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["firstname",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":1115,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1145,"title":{},"body":{"index.html":{}}}],["format",{"_index":376,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{}}}],["forward",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["forwardref",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["found",{"_index":646,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":1063,"title":{},"body":{"index.html":{}}}],["friendly",{"_index":764,"title":{},"body":{"entities/Tag.html":{}}}],["full",{"_index":1141,"title":{},"body":{"index.html":{}}}],["function",{"_index":1001,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1049,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":1112,"title":{},"body":{"index.html":{}}}],["generated",{"_index":480,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["get('/:id",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":872,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apioperation({summary",{"_index":643,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":112,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":621,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":1059,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":864,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":869,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":447,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["give",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["given",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["global",{"_index":1055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["graph",{"_index":1135,"title":{},"body":{"index.html":{}}}],["greeting",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["grow",{"_index":1155,"title":{},"body":{"index.html":{}}}],["handle",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["handles",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{}}}],["handling",{"_index":685,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["hands",{"_index":1130,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1120,"title":{},"body":{"index.html":{}}}],["hash",{"_index":852,"title":{},"body":{"entities/User.html":{}}}],["hello",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1133,"title":{},"body":{"index.html":{}}}],["here",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"index.html":{}}}],["here'})@isstring()@isoptional",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["holds",{"_index":838,"title":{},"body":{"entities/User.html":{}}}],["host",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["http",{"_index":507,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["https://example.com/image.jpg",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://example.com/image.jpg'})@isoptional()@isurl()@maxlength(1024",{"_index":394,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["https://example.com/image.jpg'})@isurl()@isoptional",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://johndoe.com",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://johndoe.com\",\\r\\n\"sameas",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://linkedin.com/in/johndoe",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":1167,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://schema.org\",\\r\\n\"@type",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://twitter.com/johndoe",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["hyphens",{"_index":411,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["id",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":479,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["identify",{"_index":759,"title":{},"body":{"entities/Tag.html":{}}}],["ids",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["import",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(tags",{"_index":833,"title":{},"body":{"injectables/TagsService.html":{}}}],["inc",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["inc.\"\\r\\n},\\r\\n\"url",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["include",{"_index":410,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["includes",{"_index":383,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/Tag.html":{}}}],["including",{"_index":107,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["incoming",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["index",{"_index":110,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"entities/Tag.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":385,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["infrastructure",{"_index":1117,"title":{},"body":{"index.html":{}}}],["inject",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(profileconfig.key",{"_index":955,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectable",{"_index":101,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":102,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":519,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/UsersService.html":{}}}],["injecting",{"_index":700,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injection",{"_index":935,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository",{"_index":541,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(metaoption",{"_index":542,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":702,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":829,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":954,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["input",{"_index":781,"title":{},"body":{"controllers/TagsController.html":{}}}],["install",{"_index":1111,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":1075,"title":{},"body":{"index.html":{}}}],["instance",{"_index":540,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/UsersService.html":{}}}],["instanceof",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["instances",{"_index":533,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["integer",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["intended",{"_index":568,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["interact",{"_index":1136,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":797,"title":{},"body":{"controllers/TagsController.html":{}}}],["invalid.'})@apibody({type",{"_index":782,"title":{},"body":{"controllers/TagsController.html":{}}}],["isarray",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["isiso8601",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isjson()@isoptional()@maxlength(1024",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["isnotempty()@isjson",{"_index":372,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["iso",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":405,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isstring",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isurl",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":1148,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1150,"title":{},"body":{"index.html":{}}}],["jobtitle",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["john",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["john'})@isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john.doe@example.com'})@isnotempty()@isemail",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["john@doe.com",{"_index":960,"title":{},"body":{"injectables/UsersService.html":{}}}],["joi",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1161,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":497,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":611,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["kamil",{"_index":1164,"title":{},"body":{"index.html":{}}}],["key",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Tag.html":{},"index.html":{}}}],["la",{"_index":708,"title":{},"body":{"injectables/PostsService.html":{}}}],["last",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["lastname",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["le",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["learn",{"_index":1123,"title":{},"body":{"index.html":{}}}],["left",{"_index":847,"title":{},"body":{"entities/User.html":{}}}],["legend",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":587,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["letter",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":1170,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1153,"title":{},"body":{"index.html":{}}}],["limit",{"_index":870,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limited",{"_index":848,"title":{},"body":{"entities/User.html":{}}}],["linkedin",{"_index":1147,"title":{},"body":{"index.html":{}}}],["list",{"_index":874,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["load",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["log",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["logic",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["logs",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["looking",{"_index":1098,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1144,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":409,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["made",{"_index":767,"title":{},"body":{"entities/Tag.html":{}}}],["main",{"_index":1051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["make",{"_index":490,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["makes",{"_index":1105,"title":{},"body":{"index.html":{}}}],["managed",{"_index":473,"title":{},"body":{"entities/MetaOption.html":{}}}],["manages",{"_index":618,"title":{},"body":{"controllers/PostsController.html":{}}}],["managing",{"_index":502,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["many",{"_index":859,"title":{},"body":{"entities/User.html":{}}}],["manytomany",{"_index":610,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":604,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":609,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":580,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["mau",{"_index":1101,"title":{},"body":{"index.html":{}}}],["maximum",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{}}}],["maxlength",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["memberof",{"_index":377,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchUserDto.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["message",{"_index":109,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Tag.html":{},"dependencies.html":{}}}],["metaoption",{"_index":371,"title":{"entities/MetaOption.html":{}},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoption.post",{"_index":590,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionrepository",{"_index":538,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["metaoptionscontroller",{"_index":500,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":37,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":689,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":513,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{}}}],["method",{"_index":942,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":111,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(11",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":413,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":1039,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1152,"title":{},"body":{"index.html":{}}}],["mock",{"_index":945,"title":{},"body":{"injectables/UsersService.html":{}}}],["mocked",{"_index":941,"title":{},"body":{"injectables/UsersService.html":{}}}],["mode",{"_index":1080,"title":{},"body":{"index.html":{}}}],["modified",{"_index":769,"title":{},"body":{"entities/Tag.html":{}}}],["module",{"_index":24,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":26,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["more",{"_index":397,"title":{},"body":{"classes/CreateTagDto.html":{},"index.html":{}}}],["multiple",{"_index":825,"title":{},"body":{"injectables/TagsService.html":{},"entities/User.html":{}}}],["myśliwiec",{"_index":1165,"title":{},"body":{"index.html":{}}}],["méthode",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["name",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1139,"title":{},"body":{"index.html":{}}}],["needed",{"_index":783,"title":{},"body":{"controllers/TagsController.html":{}}}],["needs",{"_index":558,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["nest",{"_index":120,"title":{},"body":{"injectables/AppService.html":{},"index.html":{}}}],["nested",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestframework",{"_index":1169,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1052,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/common",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":575,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newly",{"_index":509,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["newmetaoption",{"_index":544,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["newuser",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":1062,"title":{},"body":{"index.html":{}}}],["nombre",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["non",{"_index":765,"title":{},"body":{"entities/Tag.html":{}}}],["npm",{"_index":1074,"title":{},"body":{"index.html":{}}}],["null",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["nullable",{"_index":482,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["objects",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["obtains",{"_index":644,"title":{},"body":{"controllers/PostsController.html":{}}}],["occurred",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["offer",{"_index":1149,"title":{},"body":{"index.html":{}}}],["official",{"_index":1102,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":487,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/TagsController.html":{},"entities/User.html":{}}}],["onetomany",{"_index":860,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":856,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":498,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":485,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1154,"title":{},"body":{"index.html":{}}}],["operations",{"_index":570,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["option",{"_index":374,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["option.entity",{"_index":528,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":464,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:29",{"_index":477,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:42",{"_index":483,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:52",{"_index":472,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:62",{"_index":495,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:71",{"_index":489,"title":{},"body":{"entities/MetaOption.html":{}}}],["optional",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionally",{"_index":649,"title":{},"body":{"controllers/PostsController.html":{}}}],["options",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{}}}],["options.controller",{"_index":527,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":501,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:32",{"_index":505,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.dto",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["options.dto.ts",{"_index":367,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:20",{"_index":373,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":526,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":515,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":531,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:15",{"_index":537,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:33",{"_index":539,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":530,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["organization",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["organization\",\\r\\n\"name",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["out",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1174,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1017,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":871,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["param",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('userid",{"_index":668,"title":{},"body":{"controllers/PostsController.html":{}}}],["param.dto",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":450,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:27",{"_index":457,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameter",{"_index":458,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":654,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1140,"title":{},"body":{"index.html":{}}}],["partial",{"_index":555,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype",{"_index":561,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":557,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":571,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["password@123",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["password@123'})@isstring()@isnotempty()@minlength(11)@matches(/^(?=.*[a",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["patch",{"_index":569,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":652,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":549,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchpostdto.content",{"_index":725,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.featuredimageurl",{"_index":731,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.id",{"_index":721,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.publishon",{"_index":733,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.slug",{"_index":729,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.status",{"_index":727,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostdto.title",{"_index":723,"title":{},"body":{"injectables/PostsService.html":{}}}],["patchpostsdto",{"_index":670,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":865,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":564,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pattern",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["per",{"_index":880,"title":{},"body":{"controllers/UsersController.html":{}}}],["permet",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["person",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\",\\r\\n\"name",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pg",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["pipes",{"_index":1057,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plain",{"_index":850,"title":{},"body":{"entities/User.html":{}}}],["platform",{"_index":1100,"title":{},"body":{"index.html":{}}}],["please",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["plus",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["port",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":1096,"title":{},"body":{"index.html":{}}}],["post",{"_index":196,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":635,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4)@maxlength(512",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post('/:userid",{"_index":667,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/:userid')@apioperation({summary",{"_index":624,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@apioperation({summary",{"_index":867,"title":{},"body":{"controllers/UsersController.html":{}}}],["post.author",{"_index":857,"title":{},"body":{"entities/User.html":{}}}],["post.content",{"_index":724,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.dto",{"_index":562,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:108",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:120",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:132",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:145",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:16",{"_index":560,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:170",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:182",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:68",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:81",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:93",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":681,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.featuredimageurl",{"_index":730,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.metaoption",{"_index":486,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{}}}],["post.publishon",{"_index":732,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.slug",{"_index":728,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.status",{"_index":726,"title":{},"body":{"injectables/PostsService.html":{}}}],["post.tags",{"_index":735,"title":{},"body":{"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["post.title",{"_index":722,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgres",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":414,"title":{},"body":{"classes/CreateTagDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts'})@apiresponse({status",{"_index":645,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts'})@isoptional()@isstring",{"_index":388,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["posts.controller",{"_index":680,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":616,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":38,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":688,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsservice",{"_index":656,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":615,"title":{},"body":{"entities/Post.html":{}}}],["poststatus})@isnotempty()@isenum(poststatus",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttype",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":614,"title":{},"body":{"entities/Post.html":{}}}],["posttype})@isenum(posttype)@isnotempty",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pour",{"_index":707,"title":{},"body":{"injectables/PostsService.html":{}}}],["prefix",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prevent",{"_index":936,"title":{},"body":{"injectables/UsersService.html":{}}}],["primary",{"_index":757,"title":{},"body":{"entities/Tag.html":{}}}],["primarygeneratedcolumn",{"_index":476,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["proceeding",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["process",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["process.env.node_env",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1082,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":921,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["profileconfiguration",{"_index":930,"title":{},"body":{"injectables/UsersService.html":{}}}],["progressive",{"_index":1061,"title":{},"body":{"index.html":{}}}],["project",{"_index":1072,"title":{},"body":{"index.html":{}}}],["promise",{"_index":521,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["properties",{"_index":201,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":375,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["property1",{"_index":403,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["provided",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["providers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":514,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":657,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/tags.service",{"_index":792,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/users.service",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["provides",{"_index":104,"title":{},"body":{"injectables/AppService.html":{}}}],["providing",{"_index":750,"title":{},"body":{"entities/Tag.html":{}}}],["public",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["published",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["que",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":655,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":1124,"title":{},"body":{"index.html":{}}}],["r\\n\"@context",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["r\\n\"@type",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["r\\n\"https://twitter.com/johndoe\",\\r\\n\"https://linkedin.com/in/johndoe\"\\r\\n]\\r\\n",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":1162,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":1090,"title":{},"body":{"index.html":{}}}],["real",{"_index":1137,"title":{},"body":{"index.html":{}}}],["receive",{"_index":574,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["received",{"_index":543,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["reference",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["reflect",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["registered",{"_index":875,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["relation",{"_index":493,"title":{},"body":{"entities/MetaOption.html":{},"entities/User.html":{}}}],["relations",{"_index":716,"title":{},"body":{"injectables/PostsService.html":{}}}],["remove",{"_index":828,"title":{},"body":{"injectables/TagsService.html":{}}}],["repository",{"_index":536,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["representation",{"_index":753,"title":{},"body":{"entities/Tag.html":{}}}],["representing",{"_index":465,"title":{},"body":{"entities/MetaOption.html":{}}}],["represents",{"_index":579,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["request",{"_index":780,"title":{},"body":{"controllers/TagsController.html":{},"injectables/UsersService.html":{}}}],["requests",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["requesttimeoutexception",{"_index":952,"title":{},"body":{"injectables/UsersService.html":{}}}],["required",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":1108,"title":{},"body":{"index.html":{}}}],["reset",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["resources",{"_index":1118,"title":{},"body":{"index.html":{}}}],["responses",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["responsible",{"_index":532,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieve",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["retrieved",{"_index":460,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{}}}],["retrieves",{"_index":648,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["retrieving",{"_index":451,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":879,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":1045,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["revoir",{"_index":706,"title":{},"body":{"injectables/PostsService.html":{}}}],["routes",{"_index":1182,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":1076,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1094,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["sameas",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sample",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["sample_token",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":737,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["saves",{"_index":546,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["saving",{"_index":853,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["scalable",{"_index":1066,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1044,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["seb",{"_index":961,"title":{},"body":{"injectables/UsersService.html":{}}}],["seb@doe.com",{"_index":962,"title":{},"body":{"injectables/UsersService.html":{}}}],["security",{"_index":855,"title":{},"body":{"entities/User.html":{}}}],["sensitive",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["serialize",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":1048,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":1067,"title":{},"body":{"index.html":{}}}],["serves",{"_index":756,"title":{},"body":{"entities/Tag.html":{}}}],["service",{"_index":520,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["services",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"injectables/PostsService.html":{}}}],["sets",{"_index":1053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setup",{"_index":1073,"title":{},"body":{"index.html":{}}}],["side",{"_index":1068,"title":{},"body":{"index.html":{}}}],["sidebarenable\":true",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":1110,"title":{},"body":{"index.html":{}}}],["simulates",{"_index":943,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["small",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["soft",{"_index":746,"title":{},"body":{"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdeletetag",{"_index":774,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(@query('id",{"_index":803,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag(id",{"_index":789,"title":{},"body":{"controllers/TagsController.html":{}}}],["softremovetags",{"_index":815,"title":{},"body":{"injectables/TagsService.html":{}}}],["softremovetags(id",{"_index":826,"title":{},"body":{"injectables/TagsService.html":{}}}],["software",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":453,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["specified",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["specifying",{"_index":573,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["sponsors",{"_index":1157,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":1042,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":1041,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:12",{"_index":114,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":919,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":953,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:24",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:38",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:8",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":1000,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":366,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":550,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":1046,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/status.enum.ts",{"_index":1043,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":496,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":578,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:101",{"_index":583,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:110",{"_index":607,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":589,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:32",{"_index":608,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:43",{"_index":593,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":601,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":602,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":585,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:72",{"_index":600,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:78",{"_index":588,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:84",{"_index":598,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:93",{"_index":591,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":617,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:37",{"_index":647,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:54",{"_index":628,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:73",{"_index":653,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:90",{"_index":642,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":679,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":684,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:101",{"_index":698,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:15",{"_index":690,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:43",{"_index":692,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:78",{"_index":696,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:92",{"_index":695,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":381,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":699,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":812,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:20",{"_index":820,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:31",{"_index":824,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:45",{"_index":822,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:58",{"_index":827,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:8",{"_index":817,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":613,"title":{},"body":{"entities/Post.html":{}}}],["src/tags/tag.entity.ts",{"_index":738,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:101",{"_index":761,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:111",{"_index":742,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:121",{"_index":766,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:131",{"_index":745,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":754,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:44",{"_index":758,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:59",{"_index":763,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:71",{"_index":749,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:84",{"_index":762,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:98",{"_index":751,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":771,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:44",{"_index":785,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:60",{"_index":788,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:76",{"_index":791,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":682,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":808,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":448,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":565,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":924,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:110",{"_index":938,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:22",{"_index":932,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:57",{"_index":940,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:88",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity",{"_index":612,"title":{},"body":{"entities/Post.html":{}}}],["src/users/user.entity.ts",{"_index":836,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:21",{"_index":844,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":843,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:50",{"_index":846,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:65",{"_index":840,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:80",{"_index":849,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:87",{"_index":858,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":862,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:47",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":868,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:85",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":917,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":1078,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1081,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1083,"title":{},"body":{"index.html":{}}}],["started",{"_index":1060,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1071,"title":{},"body":{"index.html":{}}}],["statements",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":1143,"title":{},"body":{"index.html":{}}}],["steps",{"_index":1092,"title":{},"body":{"index.html":{}}}],["store",{"_index":466,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["stored",{"_index":837,"title":{},"body":{"entities/User.html":{}}}],["story",{"_index":1047,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":1106,"title":{},"body":{"index.html":{}}}],["string",{"_index":116,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["structure",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["successful",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":627,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["such",{"_index":386,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/Tag.html":{}}}],["summary",{"_index":665,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1125,"title":{},"body":{"index.html":{},"modules.html":{}}}],["sure",{"_index":851,"title":{},"body":{"entities/User.html":{}}}],["svg",{"_index":1172,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["synchronize",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["system",{"_index":739,"title":{},"body":{"entities/Tag.html":{}}}],["table",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":310,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@apiresponse({status",{"_index":776,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.entity",{"_index":810,"title":{},"body":{"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":605,"title":{},"body":{"entities/Post.html":{}}}],["tags",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":809,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.dto",{"_index":794,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.dto.ts",{"_index":382,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tags.dto.ts:101",{"_index":395,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags.dto.ts:36",{"_index":400,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags.dto.ts:55",{"_index":408,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags.dto.ts:70",{"_index":389,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags.dto.ts:85",{"_index":406,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tags/tags.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":770,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":39,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsrepository",{"_index":818,"title":{},"body":{"injectables/TagsService.html":{}}}],["tagsservice",{"_index":687,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["tagsservices",{"_index":701,"title":{},"body":{"injectables/PostsService.html":{}}}],["tag}'})@delete",{"_index":787,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag}'})@delete('soft",{"_index":790,"title":{},"body":{"controllers/TagsController.html":{}}}],["take",{"_index":1093,"title":{},"body":{"index.html":{}}}],["tech",{"_index":387,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology",{"_index":412,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology'})@isstring()@minlength(3)@isnotempty()@maxlength(256",{"_index":399,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["test",{"_index":958,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":1088,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1087,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1084,"title":{},"body":{"index.html":{}}}],["text",{"_index":584,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1156,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":956,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.metaoptionrepository.create",{"_index":545,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(newmetaoption",{"_index":548,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.create(createpostdto.metaoptions",{"_index":710,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(metaoptions",{"_index":711,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsservice.create(createpostmetaoptionsdto",{"_index":523,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postsrepository.create",{"_index":712,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete",{"_index":717,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":715,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findoneby",{"_index":720,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(post",{"_index":714,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.create(createpostdto",{"_index":669,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.delete(id",{"_index":675,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.findall",{"_index":666,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.update(patchpostdto",{"_index":672,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagsrepository.create(createtagdto",{"_index":830,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.delete(id",{"_index":834,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.find",{"_index":832,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.save(tag",{"_index":831,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsrepository.softdelete(id",{"_index":835,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagsservice.create(createtagdto",{"_index":799,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.deletetags(id",{"_index":801,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":705,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":719,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagsservice.softremovetags(id",{"_index":804,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonbyid(1234",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonbyid(createpostdto.authorid",{"_index":704,"title":{},"body":{"injectables/PostsService.html":{}}}],["throw",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["thrown",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":599,"title":{},"body":{"entities/Post.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["timestamp",{"_index":597,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["timestamps",{"_index":740,"title":{},"body":{"entities/Tag.html":{}}}],["title",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["token",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1163,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["transformer",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":606,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{}}}],["twitter",{"_index":1168,"title":{},"body":{"index.html":{}}}],["type",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["typeorm",{"_index":475,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionsService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":529,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":683,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":811,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user]),configmodule.forfeature(profileconfig",{"_index":923,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":576,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1070,"title":{},"body":{"index.html":{}}}],["unable",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["undefined",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiquery({name",{"_index":878,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":478,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1085,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":693,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1179,"title":{},"body":{"properties.html":{}}}],["up",{"_index":1054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["update",{"_index":468,"title":{},"body":{"entities/MetaOption.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{}}}],["update(patchpostdto",{"_index":697,"title":{},"body":{"injectables/PostsService.html":{}}}],["updated",{"_index":563,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"controllers/UsersController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":559,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["updatedate",{"_index":470,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":494,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":622,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":671,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":651,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":556,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["updating",{"_index":551,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["upon",{"_index":845,"title":{},"body":{"entities/User.html":{}}}],["url",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["use",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["used",{"_index":369,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["usefactory",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["useful",{"_index":407,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["user",{"_index":139,"title":{"entities/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":841,"title":{},"body":{"entities/User.html":{}}}],["user'})@apiresponse({status",{"_index":625,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["user.dto",{"_index":577,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:35",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:52",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:68",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:89",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":920,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.posts",{"_index":581,"title":{},"body":{"entities/Post.html":{}}}],["userid",{"_index":629,"title":{},"body":{"controllers/PostsController.html":{}}}],["username",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":449,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":918,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":566,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["users.dto.ts:28",{"_index":572,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["users/users.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":861,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":40,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":929,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":146,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":933,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["valid",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaOption.html":{}}}],["validate",{"_index":370,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["validatenested",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validates",{"_index":379,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["validation",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationschema",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaOption.html":{},"entities/Tag.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value1",{"_index":404,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["varchar",{"_index":586,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1180,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1177,"title":{},"body":{"properties.html":{}}}],["video",{"_index":596,"title":{},"body":{"entities/Post.html":{},"index.html":{}}}],["visit",{"_index":1122,"title":{},"body":{"index.html":{}}}],["visual",{"_index":752,"title":{},"body":{"entities/Tag.html":{}}}],["visualize",{"_index":1134,"title":{},"body":{"index.html":{}}}],["vous",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["want",{"_index":639,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":1079,"title":{},"body":{"index.html":{}}}],["website",{"_index":1166,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":117,"title":{},"body":{"injectables/AppService.html":{}}}],["whenever",{"_index":768,"title":{},"body":{"entities/Tag.html":{}}}],["whether",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["whose",{"_index":664,"title":{},"body":{"controllers/PostsController.html":{}}}],["witch",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["within",{"_index":760,"title":{},"body":{"entities/Tag.html":{}}}],["without",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["working",{"_index":1121,"title":{},"body":{"index.html":{}}}],["x",{"_index":1146,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1160,"title":{},"body":{"index.html":{}}}],["you're",{"_index":1089,"title":{},"body":{"index.html":{}}}],["z0",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*#?&]{11",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n            \n                Description\n            \n            \n                AppController handles incoming requests and responses for the application.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n/**\n * AppController handles incoming requests and responses for the application.\n */\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`,\n      load: [appConfig, databaseConfig],\n      validationSchema: environmentValidation,\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        autoLoadEntities: configService.get('database.autoLoadEntities'),\n        synchronize: configService.get('database.synchronize'),\n        port: +configService.get('database.port'), // le plus permet de convertir en nombre\n        username: configService.get('database.user'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.name'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AppService provides core application services, including a greeting message.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:12\n                        \n                    \n\n\n            \n                \n                        Returns a greeting message.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                A welcome message for the application.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * AppService provides core application services, including a greeting message.\n */\n@Injectable()\nexport class AppService {\n  /**\n   * Returns a greeting message.\n   * @returns {string} A welcome message for the application.\n   */\n  getHello(): string {\n    return 'Hello Nest!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController handles authentication-related requests for the application.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n/**\n * AuthController handles authentication-related requests for the application.\n */\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthService handles authentication logic, including user login and authentication checks.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Checks if the user is authenticated.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                A boolean indicating whether the user is authenticated.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Logs in a user with the given email, password, and ID.\nChecks if the user exists in the database before proceeding.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe email of the user attempting to log in.\n\n\n                                            \n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe password provided by the user.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user attempting to log in.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                A sample token if the login is successful.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n/**\n * AuthService handles authentication logic, including user login and authentication checks.\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injects the UsersService using forward reference to resolve circular dependencies\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Logs in a user with the given email, password, and ID.\n   * Checks if the user exists in the database before proceeding.\n   *\n   * @param email - The email of the user attempting to log in.\n   * @param password - The password provided by the user.\n   * @param id - The ID of the user attempting to log in.\n   * @returns A sample token if the login is successful.\n   */\n  public login(email: string, password: string, id: number) {\n    // Check if the user exists in the database\n    const user = this.usersService.findOnById(1234);\n    // Login logic would go here\n\n    // Return a sample token\n    return 'SAMPLE_TOKEN';\n  }\n\n  /**\n   * Checks if the user is authenticated.\n   *\n   * @returns A boolean indicating whether the user is authenticated.\n   */\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new post.\nThis class defines the structure of data required to create a post.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:182\n                        \n                    \n\n            \n                \n                    Each post must have one author\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', example: 'Your post content here'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:93\n                        \n                    \n\n            \n                \n                    The content of the post.\nOptional field that can contain any string.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'URL for the featured image', example: 'https://example.com/image.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:120\n                        \n                    \n\n            \n                \n                    The URL for the featured image of the post.\nMust be a valid URL and is optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined, description: 'Additional meta options for the post', example: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:170\n                        \n                    \n\n            \n                \n                    Additional meta options for the post.\nThis field is optional and may contain complex nested objects.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Define the type of your post', example: 'post', enum: postType})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:52\n                        \n                    \n\n            \n                \n                    The type of the post.\nMust be an enum value from postType, cannot be empty.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The date on which the blog post is published', example: '2024-10-23T14:30:00.000Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:132\n                        \n                    \n\n            \n                \n                    The publication date of the post.\nMust be a valid ISO 8601 date string and is optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n\"@context\": \"https://schema.org\",\n\"@type\": \"Person\",\n\"name\": \"John Doe\",\n\"jobTitle\": \"Software Developer\",\n\"affiliation\": {\n\"@type\": \"Organization\",\n\"name\": \"Acme Inc.\"\n},\n\"url\": \"https://johndoe.com\",\n\"sameAs\": [\n\"https://twitter.com/johndoe\",\n\"https://linkedin.com/in/johndoe\"\n]\n}'})@IsJSON()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:108\n                        \n                    \n\n            \n                \n                    A JSON object for additional metadata related to the post.\nMust be a valid JSON string and is optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Slug for the post URL', example: 'first-post'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: A slug should be all small letters and use only '-' without spaces. For example: \"my-url\" })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:68\n                        \n                    \n\n            \n                \n                    The slug for the post URL.\nMust be a string, cannot be empty, and must match the specified regex pattern.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Status of the post', example: 'draft', enum: postStatus})@IsNotEmpty()@IsEnum(postStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:81\n                        \n                    \n\n            \n                \n                    The status of the post.\nMust be an enum value from postStatus and cannot be empty.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of ids of tags', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:145\n                        \n                    \n\n            \n                \n                    An array of tags related to the post.\nEach tag must be a number, can be optional.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Give the title of your post', example: 'First post'})@IsString()@IsNotEmpty()@MinLength(4)@MaxLength(512)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:39\n                        \n                    \n\n            \n                \n                    The title of the post.\nMust be a string, cannot be empty, and must be between 4 and 512 characters long.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional, ApiProperty } from '@nestjs/swagger';\nimport {\n  IsArray,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/status.enum';\nimport { CreatePostMetaOptionsDto } from '../../meta-options/dtos/create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\n\n/**\n * Data Transfer Object for creating a new post.\n * This class defines the structure of data required to create a post.\n */\nexport class CreatePostDto {\n  /**\n   * The title of the post.\n   * Must be a string, cannot be empty, and must be between 4 and 512 characters long.\n   */\n  @ApiProperty({\n    description: 'Give the title of your post',\n    example: 'First post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(512)\n  title: string;\n\n  /**\n   * The type of the post.\n   * Must be an enum value from postType, cannot be empty.\n   */\n  @ApiProperty({\n    description: 'Define the type of your post',\n    example: 'post',\n    enum: postType,\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  /**\n   * The slug for the post URL.\n   * Must be a string, cannot be empty, and must match the specified regex pattern.\n   */\n  @ApiProperty({\n    description: 'Slug for the post URL',\n    example: 'first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message: `A slug should be all small letters and use only '-' without spaces. For example: \"my-url\" `,\n  })\n  slug: string;\n\n  /**\n   * The status of the post.\n   * Must be an enum value from postStatus and cannot be empty.\n   */\n  @ApiProperty({\n    description: 'Status of the post',\n    example: 'draft',\n    enum: postStatus,\n  })\n  @IsNotEmpty()\n  @IsEnum(postStatus)\n  status: postStatus;\n\n  /**\n   * The content of the post.\n   * Optional field that can contain any string.\n   */\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: 'Your post content here',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  /**\n   * A JSON object for additional metadata related to the post.\n   * Must be a valid JSON string and is optional.\n   */\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n\"@context\": \"https://schema.org\",\\r\\n\"@type\": \"Person\",\\r\\n\"name\": \"John Doe\",\\r\\n\"jobTitle\": \"Software Developer\",\\r\\n\"affiliation\": {\\r\\n\"@type\": \"Organization\",\\r\\n\"name\": \"Acme Inc.\"\\r\\n},\\r\\n\"url\": \"https://johndoe.com\",\\r\\n\"sameAs\": [\\r\\n\"https://twitter.com/johndoe\",\\r\\n\"https://linkedin.com/in/johndoe\"\\r\\n]\\r\\n}',\n  })\n  @IsJSON()\n  @IsOptional()\n  @MaxLength(1024)\n  schema?: string;\n\n  /**\n   * The URL for the featured image of the post.\n   * Must be a valid URL and is optional.\n   */\n  @ApiPropertyOptional({\n    description: 'URL for the featured image',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  featuredImageUrl?: string;\n\n  /**\n   * The publication date of the post.\n   * Must be a valid ISO 8601 date string and is optional.\n   */\n  @ApiProperty({\n    description: 'The date on which the blog post is published',\n    example: '2024-10-23T14:30:00.000Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  /**\n   * An array of tags related to the post.\n   * Each tag must be a number, can be optional.\n   */\n  @ApiPropertyOptional({\n    description: 'Array of ids of tags',\n    example: [1, 2],\n  })\n  @IsOptional() // Tags can be optional\n  @IsArray()\n  @IsInt({ each: true }) // Each element of the array must be a string\n  tags?: number[];\n\n  /**\n   * Additional meta options for the post.\n   * This field is optional and may contain complex nested objects.\n   */\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnable\":true}',\n        },\n      },\n    },\n    description: 'Additional meta options for the post',\n    example: [{ key: 'author', value: 'John Doe' }],\n  })\n  @IsOptional() // Meta options can be optional\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto | null;\n\n  /**\n   * Each post must have one author\n   */\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    example: 1,\n  })\n  @IsNotEmpty()\n  @IsInt()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-meta-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating Meta options.\nUsed to validate incoming data for creating a MetaOption.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-meta-options.dto.ts:20\n                        \n                    \n\n            \n                \n                    JSON value of the Meta option.\nThis property is required and must be in valid JSON format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from 'class-validator';\n\n/**\n * DTO for creating Meta options.\n * Used to validate incoming data for creating a `MetaOption`.\n *\n * @export\n * @class CreatePostMetaOptionsDto\n */\nexport class CreatePostMetaOptionsDto {\n  /**\n   * JSON value of the Meta option.\n   * This property is required and must be in valid JSON format.\n   *\n   * @type {string}\n   * @memberof CreatePostMetaOptionsDto\n   */\n  @IsNotEmpty() // Ensures the field is not empty\n  @IsJSON() // Validates that the value is in valid JSON format\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tags.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for creating a new tag.\nIncludes fields for tag information such as name, slug, description, schema, and featured image URL.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Optional description of the tag', example: 'A tag for tech-related posts'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:70\n                        \n                    \n\n            \n                \n                    Optional description of the tag.\nAllows a brief explanation or details about the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Optional URL for the featured image of the tag', example: 'https://example.com/image.jpg'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:101\n                        \n                    \n\n            \n                \n                    Optional URL for the featured image associated with the tag.\nMust be a valid URL and no more than 1024 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology'})@IsString()@MinLength(3)@IsNotEmpty()@MaxLength(256)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:36\n                        \n                    \n\n            \n                \n                    The name of the tag.\nThis field is required and must be between 3 and 256 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Optional JSON schema for the tag metadata', example: '{\"type\": \"object\", \"properties\": { \"property1\": \"value1\" }}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:85\n                        \n                    \n\n            \n                \n                    Optional JSON schema for the tag, useful for additional tag metadata.\nMust be in JSON format if provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Slug for the tag URL', example: 'first-post'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: A slug should be all small letters and use only '-' without spaces. For example: \"my-url\" })\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tags.dto.ts:55\n                        \n                    \n\n            \n                \n                    Slug for the tag, used in the URL.\nShould be in lowercase letters and can include hyphens, no spaces.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data transfer object (DTO) for creating a new tag.\n * Includes fields for tag information such as name, slug, description, schema, and featured image URL.\n *\n * @export\n * @class CreateTagDto\n */\nexport class CreateTagDto {\n  /**\n   * The name of the tag.\n   * This field is required and must be between 3 and 256 characters.\n   *\n   * @type {string}\n   * @memberof CreateTagDto\n   */\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n  })\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  @MaxLength(256)\n  name: string;\n\n  /**\n   * Slug for the tag, used in the URL.\n   * Should be in lowercase letters and can include hyphens, no spaces.\n   *\n   * @type {string}\n   * @memberof CreateTagDto\n   */\n  @ApiProperty({\n    description: 'Slug for the tag URL',\n    example: 'first-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message: `A slug should be all small letters and use only '-' without spaces. For example: \"my-url\" `,\n  })\n  slug: string;\n\n  /**\n   * Optional description of the tag.\n   * Allows a brief explanation or details about the tag.\n   *\n   * @type {string}\n   * @memberof CreateTagDto\n   */\n  @ApiPropertyOptional({\n    description: 'Optional description of the tag',\n    example: 'A tag for tech-related posts',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  /**\n   * Optional JSON schema for the tag, useful for additional tag metadata.\n   * Must be in JSON format if provided.\n   *\n   * @type {string}\n   * @memberof CreateTagDto\n   */\n  @ApiPropertyOptional({\n    description: 'Optional JSON schema for the tag metadata',\n    example: '{\"type\": \"object\", \"properties\": { \"property1\": \"value1\" }}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  /**\n   * Optional URL for the featured image associated with the tag.\n   * Must be a valid URL and no more than 1024 characters.\n   *\n   * @type {string}\n   * @memberof CreateTagDto\n   */\n  @ApiPropertyOptional({\n    description: 'Optional URL for the featured image of the tag',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for creating a new user.\nIncludes fields for user information such as first name, last name, email, and password.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email address of the user, required field and must be in valid email format.', example: 'john.doe@example.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:68\n                        \n                    \n\n            \n                \n                    Email address of the user.\nRequired field that must be a valid email format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'First name of the user, required field.', example: 'John'})@IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n            \n                \n                    First name of the user.\nThis field is required and must be between 3 and 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Last name of the user, optional field.', example: 'Doe'})@IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:52\n                        \n                    \n\n            \n                \n                    Last name of the user.\nThis field is optional and must be between 3 and 96 characters if provided.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password for the user account, must be at least 11 characters, include one letter, one number, and one special character.', example: 'Password@123'})@IsString()@IsNotEmpty()@MinLength(11)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{11,}$/, {message: 'Minimum eleven characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:89\n                        \n                    \n\n            \n                \n                    Password for the user account.\nMust be at least 11 characters long, including one letter, one number, and one special character.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\n/**\n * Data transfer object (DTO) for creating a new user.\n * Includes fields for user information such as first name, last name, email, and password.\n *\n * @export\n * @class CreateUserDto\n */\nexport class CreateUserDto {\n  /**\n   * First name of the user.\n   * This field is required and must be between 3 and 96 characters.\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   */\n  @ApiProperty({\n    description: 'First name of the user, required field.',\n    example: 'John',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  /**\n   * Last name of the user.\n   * This field is optional and must be between 3 and 96 characters if provided.\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   */\n  @ApiProperty({\n    description: 'Last name of the user, optional field.',\n    example: 'Doe',\n  })\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  /**\n   * Email address of the user.\n   * Required field that must be a valid email format.\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   */\n  @ApiProperty({\n    description:\n      'Email address of the user, required field and must be in valid email format.',\n    example: 'john.doe@example.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  /**\n   * Password for the user account.\n   * Must be at least 11 characters long, including one letter, one number, and one special character.\n   *\n   * @type {string}\n   * @memberof CreateUserDto\n   */\n  @ApiProperty({\n    description:\n      'Password for the user account, must be at least 11 characters, include one letter, one number, and one special character.',\n    example: 'Password@123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(11)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{11,}$/, {\n    message:\n      'Minimum eleven characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for retrieving users based on specific parameters.\nAllows optional filtering by user ID when fetching user data.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:27\n                        \n                    \n\n            \n                \n                    Optional parameter to fetch a user by a specific ID.\nIf provided, only the user with this ID will be retrieved.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Data transfer object (DTO) for retrieving users based on specific parameters.\n * Allows optional filtering by user ID when fetching user data.\n *\n * @export\n * @class GetUsersParamDto\n */\nexport class GetUsersParamDto {\n  /**\n   * Optional parameter to fetch a user by a specific ID.\n   * If provided, only the user with this ID will be retrieved.\n   *\n   * @type {number}\n   * @memberof GetUsersParamDto\n   */\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a Meta option in the database.\nThis entity is used to store options in JSON format with creation and update date fields.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:52\n                        \n                    \n\n            \n                \n                    Creation date of the Meta option.\nManaged automatically by TypeORM.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:29\n                        \n                    \n\n            \n                \n                    Unique identifier for the Meta option.\nAutomatically generated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:42\n                        \n                    \n\n            \n                \n                    Value of the Meta option in JSON format.\nThis column is required and must be in valid JSON format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOption, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:71\n                        \n                    \n\n            \n                \n                    Make a bi-directonal one-to-one relation with post\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:62\n                        \n                    \n\n            \n                \n                    Update date of the Meta option.\nManaged automatically by TypeORM.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Entity representing a Meta option in the database.\n * This entity is used to store options in JSON format with creation and update date fields.\n *\n * @export\n * @class MetaOption\n */\n@Entity()\nexport class MetaOption {\n  /**\n   * Unique identifier for the Meta option.\n   * Automatically generated.\n   *\n   * @type {number}\n   * @memberof MetaOption\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Value of the Meta option in JSON format.\n   * This column is required and must be in valid JSON format.\n   *\n   * @type {string}\n   * @memberof MetaOption\n   */\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  /**\n   * Creation date of the Meta option.\n   * Managed automatically by TypeORM.\n   *\n   * @type {Date}\n   * @memberof MetaOption\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Update date of the Meta option.\n   * Managed automatically by TypeORM.\n   *\n   * @type {Date}\n   * @memberof MetaOption\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Make a bi-directonal one-to-one relation with post\n   */\n  @OneToOne(() => Post, (post) => post.metaOption, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing Meta options.\nThis controller handles the endpoints for creating new Meta options.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Creates a new Meta option.\nHTTP POST endpoint to create a new Meta option with the provided data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data for the new Meta option.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created Meta option.\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-meta-options.dto';\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { ApiTags } from '@nestjs/swagger';\n\n/**\n * Controller for managing Meta options.\n * This controller handles the endpoints for creating new Meta options.\n *\n * @export\n * @class MetaOptionsController\n */\n@ApiTags('meta-options')\n@Controller('meta-options')\nexport class MetaOptionsController {\n  /**\n   * Constructor for the `MetaOptionsController`.\n   *\n   * @param {MetaOptionsService} metaOptionsService - Injected service for managing Meta options.\n   */\n  constructor(private readonly metaOptionsService: MetaOptionsService) {}\n\n  /**\n   * Creates a new Meta option.\n   * HTTP POST endpoint to create a new Meta option with the provided data.\n   *\n   * @param {CreatePostMetaOptionsDto} createPostMetaOptionsDto - The data for the new Meta option.\n   * @returns {Promise} The newly created Meta option.\n   * @memberof MetaOptionsController\n   */\n  @Post()\n  public create(@Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    return this.metaOptionsService.create(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Meta options in the application.\nThis service is responsible for creating and managing MetaOption instances.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for MetaOptionsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInjected repository for the MetaOption entity.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Creates a new Meta option.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nData for creating a new Meta option.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created MetaOption instance.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-meta-options.dto';\n\n/**\n * Service for managing Meta options in the application.\n * This service is responsible for creating and managing `MetaOption` instances.\n *\n * @export\n * @class MetaOptionsService\n */\n@Injectable()\nexport class MetaOptionsService {\n  /**\n   * Constructor for `MetaOptionsService`.\n   *\n   * @param {Repository} metaOptionRepository - Injected repository for the `MetaOption` entity.\n   */\n  constructor(\n    @InjectRepository(MetaOption)\n    private readonly metaOptionRepository: Repository,\n  ) {}\n\n  /**\n   * Creates a new Meta option.\n   *\n   * @param {CreatePostMetaOptionsDto} createPostMetaOptionsDto - Data for creating a new Meta option.\n   * @returns {Promise} The newly created `MetaOption` instance.\n   * @memberof MetaOptionsService\n   */\n  public async create(\n    createPostMetaOptionsDto: CreatePostMetaOptionsDto,\n  ): Promise {\n    // Creates a new MetaOption instance with the received data.\n    let newMetaOption = this.metaOptionRepository.create(\n      createPostMetaOptionsDto,\n    );\n\n    // Saves the new instance in the database and returns it.\n    return await this.metaOptionRepository.save(newMetaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for updating an existing post.\nThis class extends the CreatePostDto to allow partial updates of the post fields.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\n/**\n * Data Transfer Object for updating an existing post.\n * This class extends the CreatePostDto to allow partial updates of the post fields.\n */\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data transfer object (DTO) for updating user properties.\nThis class extends CreateUserDto, allowing partial updates on user fields.\nIntended for patch operations to update existing user information.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/patch-users.dto.ts:28\n                        \n                    \n\n            \n                \n                    Unique identifier for the user to be updated.\nRequired for specifying which user should receive the updates.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\n/**\n * Data transfer object (DTO) for updating user properties.\n * This class extends `CreateUserDto`, allowing partial updates on user fields.\n * Intended for patch operations to update existing user information.\n *\n * @export\n * @class PatchUserDto\n * @extends {PartialType(CreateUserDto)}\n */\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  /**\n   * Unique identifier for the user to be updated.\n   * Required for specifying which user should receive the updates.\n   *\n   * @type {number}\n   * @memberof PatchUserDto\n   */\n  @ApiProperty({\n    description: 'The ID of the user that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a blog post.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOption\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:101\n                        \n                    \n\n            \n                \n                    One Post can have one author\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n            \n                \n                    The content of the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:78\n                        \n                    \n\n            \n                \n                    A URL to a featured image for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n            \n                \n                    The unique identifier for the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOption => metaOption.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:93\n                        \n                    \n\n            \n                \n                    The meta options associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:43\n                        \n                    \n\n            \n                \n                    The type of the post (e.g., article, video).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:84\n                        \n                    \n\n            \n                \n                    The date and time when the post will be published.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:72\n                        \n                    \n\n            \n                \n                    A JSON schema associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', unique: true, nullable: false, length: 256})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n            \n                \n                    The slug for the post, used in the URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n            \n                \n                    The current status of the post (e.g., draft, published).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:110\n                        \n                    \n\n            \n                \n                    An array of tags associated with the post.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:32\n                        \n                    \n\n            \n                \n                    The title of the post.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  OneToOne,\n  JoinColumn,\n  ManyToOne,\n  ManyToMany,\n  JoinTable,\n} from 'typeorm';\nimport { postType } from './enums/postType.enum';\nimport { postStatus } from './enums/status.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n/**\n * Represents a blog post.\n */\n@Entity()\nexport class Post {\n  /**\n   * The unique identifier for the post.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * The title of the post.\n   */\n  @Column({ type: 'varchar', length: 512, nullable: false })\n  title: string;\n\n  /**\n   * The type of the post (e.g., article, video).\n   */\n  @Column({\n    type: 'enum',\n    enum: postType,\n    nullable: false,\n    default: postType.POST,\n  })\n  postType: postType;\n\n  /**\n   * The slug for the post, used in the URL.\n   */\n  @Column({ type: 'varchar', unique: true, nullable: false, length: 256 })\n  slug: string;\n\n  /**\n   * The current status of the post (e.g., draft, published).\n   */\n  @Column({\n    type: 'enum',\n    enum: postStatus,\n    nullable: false,\n    default: postStatus.DRAFT,\n  })\n  status: postStatus;\n\n  /**\n   * The content of the post.\n   */\n  @Column({ type: 'text', nullable: true })\n  content?: string;\n\n  /**\n   * A JSON schema associated with the post.\n   */\n  @Column({ type: 'text', nullable: true })\n  schema?: string;\n\n  /**\n   * A URL to a featured image for the post.\n   */\n  @Column({ type: 'varchar', nullable: true, length: 1024 })\n  featuredImageUrl?: string;\n\n  /**\n   * The date and time when the post will be published.\n   */\n  @Column({ type: 'timestamp', nullable: true })\n  publishOn?: Date;\n\n  /**\n   * The meta options associated with the post.\n   */\n  @OneToOne(() => MetaOption, (metaOption) => metaOption.post, {\n    cascade: true,\n    eager: true,\n  })\n  metaOption?: MetaOption;\n\n  /**\n   * One Post can have one author\n   */\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n  })\n  author: User;\n\n  /**\n   * An array of tags associated with the post.\n   */\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n            \n                Description\n            \n            \n                PostsController manages operations related to posts.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(userId: string, createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/:userId')@ApiOperation({summary: 'Creates a new post for a user'})@ApiResponse({status: 201, description: 'The post has been successfully created.'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Creates a new post for a specific user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user for whom the post is created.\n\n\n                                            \n                                        \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe data transfer object containing post details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created post (this should eventually return the post from the service).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes an existing post'})@ApiResponse({status: 200, description: 'The post has been successfully deleted'})@ApiQuery({name: 'id', type: 'number', required: true, description: 'The id of entries you want to delete', example: 10})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:90\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Obtains all the posts'})@ApiResponse({status: 200, description: 'The post has been successfully found'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:37\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts, optionally filtered by user ID.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                An array of posts for the specified user or all posts if no user ID is provided.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Updates an existing post'})@ApiResponse({status: 200, description: 'The post has been successfully updated'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:73\n                        \n                    \n\n\n            \n                \n                        Updates an existing post.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The updated post (this should eventually return the updated post from the service).\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n/**\n * PostsController manages operations related to posts.\n */\n@Controller('posts')\n@ApiTags('posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  /**\n   * Retrieves all posts, optionally filtered by user ID.\n   *\n   * @param userId - The ID of the user whose posts are to be retrieved (optional).\n   * @returns An array of posts for the specified user or all posts if no user ID is provided.\n   */\n  @Get()\n  @ApiOperation({ summary: 'Obtains all the posts' })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully found',\n  })\n  public getPosts() {\n    return this.postsService.findAll();\n  }\n\n  /**\n   * Creates a new post for a specific user.\n   *\n   * @param userId - The ID of the user for whom the post is created.\n   * @param createPostDto - The data transfer object containing post details.\n   * @returns The newly created post (this should eventually return the post from the service).\n   */\n  @Post('/:userId')\n  @ApiOperation({ summary: 'Creates a new post for a user' })\n  @ApiResponse({\n    status: 201,\n    description: 'The post has been successfully created.',\n  })\n  public createPost(\n    @Param('userId') userId: string,\n    @Body() createPostDto: CreatePostDto,\n  ) {\n    return this.postsService.create(createPostDto);\n  }\n\n  /**\n   * Updates an existing post.\n   *\n   * @param patchPostsDto - The data transfer object containing updated post details.\n   * @returns The updated post (this should eventually return the updated post from the service).\n   */\n  @Patch()\n  @ApiOperation({ summary: 'Updates an existing post' })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully updated',\n  })\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    return this.postsService.update(patchPostDto);\n  }\n\n  @ApiOperation({ summary: 'Deletes an existing post' })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully deleted',\n  })\n  @ApiQuery({\n    name: 'id',\n    type: 'number',\n    required: true,\n    description: 'The id of entries you want to delete',\n    example: 10,\n  })\n  @Delete()\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nTagsModule\n\nTagsModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling posts-related operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, tagsService: TagsService, postsRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Creating new posts\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Delete post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Retrieves all posts for a specific user.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array of posts with the user information.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Update post with tags\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Post } from '../post.entity';\nimport { Repository } from 'typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\n\n/**\n * Service for handling posts-related operations.\n */\n@Injectable()\nexport class PostsService {\n  constructor(\n    /**\n     * Injecting Users Services\n     */\n    private readonly usersService: UsersService,\n\n    /**\n     * Injecting the TagsServices\n     */\n    private readonly tagsService: TagsService,\n\n    /**\n     * Repository for managing Post entities.\n     */\n    @InjectRepository(Post)\n    private postsRepository: Repository,\n\n    /**\n     * Inject metaOptionsRepository\n     */\n    @InjectRepository(MetaOption)\n    private metaOptionsRepository: Repository,\n  ) {}\n\n  /**\n   * Creating new posts\n   */\n  public async create(@Body() createPostDto: CreatePostDto) {\n    // Find the author first\n    let author = await this.usersService.findOnById(createPostDto.authorId);\n    // Find tags\n    let tags = await this.tagsService.findMultipleTags(createPostDto.tags);\n\n    //Create metaOptions a revoir pour la cascade\n    let metaOptions = createPostDto.metaOptions\n      ? this.metaOptionsRepository.create(createPostDto.metaOptions)\n      : null;\n\n    if (metaOptions) {\n      await this.metaOptionsRepository.save(metaOptions);\n    }\n\n    //Create post\n    let post = this.postsRepository.create({\n      ...createPostDto,\n      author: author,\n      tags: tags,\n    });\n\n    // Add metaOptions to the post\n    if (metaOptions) {\n      post.metaOption = metaOptions;\n    }\n\n    //return the post\n    return await this.postsRepository.save(post);\n  }\n\n  /**\n   * Retrieves all posts for a specific user.\n   * @returns An array of posts with the user information.\n   */\n  public async findAll() {\n    let posts = await this.postsRepository.find({\n      relations: {\n        metaOption: true,\n        // author: true,\n        // tags: true,\n      },\n    });\n    return posts;\n  }\n\n  /**\n   * Delete post\n   */\n  public async delete(id: number) {\n    await this.postsRepository.delete({ id });\n    //confirm\n    return { deleted: true, id };\n  }\n\n  /**\n   * Update post with tags\n   */\n  public async update(patchPostDto: PatchPostDto) {\n    // 1 Find first tags\n    let tags = await this.tagsService.findMultipleTags(patchPostDto.tags);\n\n    // 2 Find the post\n    let post = await this.postsRepository.findOneBy({ id: patchPostDto.id });\n\n    // 3 update the properties\n    post.title = patchPostDto.title ?? post.title;\n    post.content = patchPostDto.content ?? post.content;\n    post.status = patchPostDto.status ?? post.status;\n    post.slug = patchPostDto.slug ?? post.slug;\n    post.featuredImageUrl =\n      patchPostDto.featuredImageUrl ?? post.featuredImageUrl;\n    post.publishOn = patchPostDto.publishOn ?? post.publishOn;\n\n    // 4 assign new tags\n    post.tags = tags;\n\n    // 5 save & return\n    return await this.postsRepository.save(post);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a Tag entity, containing metadata for tags used in the system.\nIncludes fields such as name, slug, description, schema, and timestamps.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                dateDeleteAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:111\n                        \n                    \n\n            \n                \n                    Timestamp of when the tag was created.\nAutomatically generated when a new tag is added to the database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dateDeleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:131\n                        \n                    \n\n            \n                \n                    Soft delete timestamp indicating when the tag was deleted.\nIf the value is null, the tag is considered active.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:71\n                        \n                    \n\n            \n                \n                    Optional description providing additional details about the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:98\n                        \n                    \n\n            \n                \n                    Optional URL for the featured image associated with the tag.\nUsed for visual representation of the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n            \n                \n                    Unique identifier for the tag.\nThis value is auto-generated and serves as the primary key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:44\n                        \n                    \n\n            \n                \n                    Name of the tag, required and must be unique.\nUsed to identify the tag within the system.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:84\n                        \n                    \n\n            \n                \n                    Optional JSON schema associated with the tag.\nCan be used to store metadata for the tag.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:59\n                        \n                    \n\n            \n                \n                    Slug for the tag, a unique URL-friendly identifier.\nShould be unique and non-null.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:121\n                        \n                    \n\n            \n                \n                    Timestamp of the last update made to the tag.\nAutomatically updated whenever the tag is modified.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Represents a Tag entity, containing metadata for tags used in the system.\n * Includes fields such as name, slug, description, schema, and timestamps.\n *\n * @export\n * @class Tag\n */\n@Entity()\nexport class Tag {\n  /**\n   * Unique identifier for the tag.\n   * This value is auto-generated and serves as the primary key.\n   *\n   * @type {number}\n   * @memberof Tag\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * Name of the tag, required and must be unique.\n   * Used to identify the tag within the system.\n   *\n   * @type {string}\n   * @memberof Tag\n   */\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  /**\n   * Slug for the tag, a unique URL-friendly identifier.\n   * Should be unique and non-null.\n   *\n   * @type {string}\n   * @memberof Tag\n   */\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  /**\n   * Optional description providing additional details about the tag.\n   *\n   * @type {string}\n   * @memberof Tag\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  /**\n   * Optional JSON schema associated with the tag.\n   * Can be used to store metadata for the tag.\n   *\n   * @type {string}\n   * @memberof Tag\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  /**\n   * Optional URL for the featured image associated with the tag.\n   * Used for visual representation of the tag.\n   *\n   * @type {string}\n   * @memberof Tag\n   */\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, { onDelete: 'CASCADE' })\n  posts: Post[];\n\n  /**\n   * Timestamp of when the tag was created.\n   * Automatically generated when a new tag is added to the database.\n   *\n   * @type {Date}\n   * @memberof Tag\n   */\n  @CreateDateColumn()\n  createDate: Date;\n\n  /**\n   * Timestamp of the last update made to the tag.\n   * Automatically updated whenever the tag is modified.\n   *\n   * @type {Date}\n   * @memberof Tag\n   */\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  /**\n   * Soft delete timestamp indicating when the tag was deleted.\n   * If the value is null, the tag is considered active.\n   *\n   * @type {Date}\n   * @memberof Tag\n   */\n  @DeleteDateColumn()\n  dateDeleteAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                createTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates one tag'})@ApiResponse({status: 201, description: 'Tag is successfully created'})@ApiResponse({status: 400, description: 'Bad Request. The input data is invalid.'})@ApiBody({type: CreateTagDto, description: 'Tag data needed for creation'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Creates a new tag with the provided details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The data transfer object containing tag details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The newly created tag.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Deletes tag'})@ApiResponse({status: 200, description: '{deleted : true, id : id of the tag}'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:60\n                        \n                    \n\n\n            \n                \n                        Delete a tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nid of tag\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Soft Deletes tag'})@ApiResponse({status: 200, description: '{deleted : true, id : id of the tag}'})@Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:76\n                        \n                    \n\n\n            \n                \n                        Soft Delete a tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nid of tag\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { ApiOperation, ApiResponse, ApiTags, ApiBody } from '@nestjs/swagger';\nimport { CreateTagDto } from './dtos/create-tags.dto';\n\n@ApiTags('tags')\n@Controller('tags')\nexport class TagsController {\n  constructor(\n    /**\n     * Inject TagsService\n     */\n    private readonly tagsService: TagsService,\n  ) {}\n\n  /**\n   * Creates a new tag with the provided details.\n   * @param createTagDto The data transfer object containing tag details.\n   * @returns The newly created tag.\n   */\n  @ApiOperation({\n    summary: 'Creates one tag',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Tag is successfully created',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Bad Request. The input data is invalid.',\n  })\n  @ApiBody({\n    type: CreateTagDto,\n    description: 'Tag data needed for creation',\n  })\n  @Post()\n  public createTag(@Body() createTagDto: CreateTagDto) {\n    return this.tagsService.create(createTagDto);\n  }\n\n  /**\n   * Delete a tag\n   * @param id - id of tag\n   */\n  @ApiOperation({\n    summary: 'Deletes tag',\n  })\n  @ApiResponse({\n    status: 200,\n    description: '{deleted : true, id : id of the tag}',\n  })\n  @Delete()\n  public async deleteTag(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.deleteTags(id);\n  }\n\n  /**\n   * Soft Delete a tag\n   * @param id - id of tag\n   */\n  @ApiOperation({\n    summary: 'Soft Deletes tag',\n  })\n  @ApiResponse({\n    status: 200,\n    description: '{deleted : true, id : id of the tag}',\n  })\n  @Delete('soft-delete')\n  public async softDeleteTag(@Query('id', ParseIntPipe) id: number) {\n    return this.tagsService.softRemoveTags(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  providers: [TagsService],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                deleteTags\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softRemoveTags\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:20\n                        \n                    \n\n\n            \n                \n                        Create a new tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTags(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Delete tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:31\n                        \n                    \n\n\n            \n                \n                         Find Multiple Tags\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softRemoveTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    softRemoveTags(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:58\n                        \n                    \n\n\n            \n                \n                        Soft Remove tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from '../dtos/create-tags.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { In, Repository } from 'typeorm';\n\n@Injectable()\nexport class TagsService {\n  constructor(\n    /**\n     * Inject TagsRepository\n     */\n    @InjectRepository(Tag)\n    private readonly tagsRepository: Repository,\n  ) {}\n\n  /**\n   * Create a new tag\n   */\n  public async create(createTagDto: CreateTagDto) {\n    let tag = this.tagsRepository.create(createTagDto);\n    tag = await this.tagsRepository.save(tag);\n    return tag;\n  }\n\n  /**\n   *  Find Multiple Tags\n   * @param tags\n   * @returns\n   */\n  public async findMultipleTags(tags: number[]) {\n    let results = await this.tagsRepository.find({\n      where: {\n        id: In(tags),\n      },\n    });\n    return results;\n  }\n\n  /**\n   * Delete tag\n   * @param id\n   * @returns\n   */\n  public async deleteTags(id: number) {\n    let tag = await this.tagsRepository.delete(id);\n    return {\n      deleted: true,\n      id,\n    };\n  }\n\n  /**\n   * Soft Remove tag\n   * @param id\n   * @returns\n   */\n  public async softRemoveTags(id: number) {\n    let tag = await this.tagsRepository.softDelete(id);\n    return {\n      deleted: true,\n      id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a user entity in the application.\nThis entity is stored in the database and holds essential user information.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:65\n                        \n                    \n\n            \n                \n                    User's unique email address.\nThis field is required, must be unique across all users, and cannot exceed 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n            \n                \n                    User's first name.\nThis field is required and cannot exceed 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the user.\nThis ID is automatically generated by the database upon creation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:50\n                        \n                    \n\n            \n                \n                    User's last name.\nThis field is optional and can be left empty.\nThe length is limited to 96 characters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:80\n                        \n                    \n\n            \n                \n                    User's password.\nThis field is required and should not exceed 96 characters.\nIt is stored as a plain string; make sure to hash it before saving to ensure security.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:87\n                        \n                    \n\n            \n                \n                    Make a one-to-many relation with post\nOne author can have multiple post\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Represents a user entity in the application.\n * This entity is stored in the database and holds essential user information.\n *\n * @export\n * @class User\n */\n@Entity()\nexport class User {\n  /**\n   * Unique identifier for the user.\n   * This ID is automatically generated by the database upon creation.\n   *\n   * @type {number}\n   * @memberof User\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * User's first name.\n   * This field is required and cannot exceed 96 characters.\n   *\n   * @type {string}\n   * @memberof User\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  /**\n   * User's last name.\n   * This field is optional and can be left empty.\n   * The length is limited to 96 characters.\n   *\n   * @type {string}\n   * @memberof User\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  /**\n   * User's unique email address.\n   * This field is required, must be unique across all users, and cannot exceed 96 characters.\n   *\n   * @type {string}\n   * @memberof User\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  /**\n   * User's password.\n   * This field is required and should not exceed 96 characters.\n   * It is stored as a plain string; make sure to hash it before saving to ensure security.\n   *\n   * @type {string}\n   * @memberof User\n   */\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  /**\n   * Make a one-to-many relation with post\n   * One author can have multiple post\n   */\n  @OneToMany(() => Post, (post) => post.author)\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Creates a new user'})@ApiResponse({status: 201, description: 'User created successfully', type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query', type: undefined})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Updates an existing user'})@ApiResponse({status: 200, description: 'User updated successfully', type: CreateUserDto})@ApiResponse({status: 404, description: 'User not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-users.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n    type: [CreateUserDto], // Assuming the return type is an array of CreateUserDto\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  @ApiOperation({\n    summary: 'Creates a new user',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'User created successfully',\n    type: CreateUserDto, // Assuming it returns the created user object\n  })\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(\n      'users controller POST / createUserDTO is not a CreateUserDTO type >>>',\n      createUserDto instanceof CreateUserDto,\n    );\n    return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  @ApiOperation({\n    summary: 'Updates an existing user',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'User updated successfully',\n    type: CreateUserDto, // Assuming it returns the updated user object\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'User not found',\n  })\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto; // Assurez-vous que cette méthode existe\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User]),ConfigModule.forFeature(profileConfig)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling business operations related to users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOnById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository, profileConfiguration: ConfigType<>)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:22\n                            \n                        \n\n                \n                    \n                            Creates an instance of the UsersService.\nIt uses dependency injection for the authentication service with forwardRef\nto prevent circular dependencies.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe injected authentication service.\n\n\n                                                        \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        profileConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDTO: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDTO\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Retrieves a list of users (mocked).\nThis method simulates a connection to a database and returns a mock list of users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for filtering users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to return.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Array\n\n                        \n                            \n                                A list of users containing their first name and email.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOnById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOnById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves a user by their ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user to retrieve.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                An array containing a user object with id, first name, and email.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigService, ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\n\n/**\n * Service responsible for handling business operations related to users.\n * @class UsersService\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Creates an instance of the `UsersService`.\n   * It uses dependency injection for the authentication service with `forwardRef`\n   * to prevent circular dependencies.\n   *\n   * @param {AuthService} authService - The injected authentication service.\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * Injecting usersRepository\n     */\n    @InjectRepository(User)\n    private readonly usersRepository: Repository,\n\n    /**\n     * Env\n     */\n    @Inject(profileConfig.KEY)\n    private readonly profileConfiguration: ConfigType,\n  ) {}\n\n  /**\n   * Retrieves a list of users (mocked).\n   * This method simulates a connection to a database and returns a mock list of users.\n   *\n   * @param {GetUsersParamDto} getUsersParamDto - Parameters for filtering users.\n   * @param {number} limit - Maximum number of users to return.\n   * @param {number} page - Page number for pagination.\n   * @returns {Array} A list of users containing their first name and email.\n   */\n\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ): Array {\n    // Check if the user is authenticated using the authentication service.\n    const isAuth = this.authService.isAuth();\n    console.log('user.service >>>', isAuth);\n\n    //test\n    console.log(this.profileConfiguration);\n\n    // Return a mock list of users.\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Seb',\n        email: 'seb@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * Retrieves a user by their ID.\n   *\n   * @param {number} id - The ID of the user to retrieve.\n   * @returns {Array} An array containing a user object with id, first name, and email.\n   */\n  public async findOnById(id: number) {\n    let user = undefined;\n    try {\n      user = await this.usersRepository.findOneBy({ id });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Error occurred while retrieving user by ID',\n        {\n          description: 'Database connection error',\n        },\n      );\n    }\n    /**\n     * Handle the user not exist\n     */\n    if (!user) {\n      throw new BadRequestException('The user id does not exist');\n    }\n\n    return user;\n  }\n\n  public async createUser(createUserDTO: CreateUserDto) {\n    let existingUser = undefined;\n\n    try {\n      // Check is user exists with same email\n      await this.usersRepository.findOne({\n        where: {\n          email: createUserDTO.email,\n        },\n      });\n    } catch (error) {\n      // Might save the details of the exception\n      // Information witch is sensitive\n      throw new RequestTimeoutException(\n        'Unable to process your request at the moment please try later',\n        {\n          description: 'Erreur connecting to the database',\n        },\n      );\n    }\n\n    // Handle exception\n    if (existingUser) {\n      throw new BadRequestException(\n        'The user already exists, please check your email',\n      );\n    }\n\n    // Create a new user\n    let newUser = this.usersRepository.create(createUserDTO);\n    try {\n      newUser = await this.usersRepository.save(newUser);\n    } catch (error) {\n      throw new RequestTimeoutException(\n        'Unable to create a new user at this time',\n        {\n          description: 'Database error while saving user',\n        },\n      );\n    }\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tags.dto.ts\n            \n            class\n            CreateTagDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-users.dto.ts\n            \n            class\n            PatchUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.26\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.3.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../status.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Main function to bootstrap the NestJS application.\nSets up global configurations, pipes, and Swagger for API documentation.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
